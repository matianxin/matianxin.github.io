<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Openstack Queens 环境搭建（一）环境准备]]></title>
    <url>%2F2019%2F06%2F20%2FOpenstackQueens1%2F</url>
    <content type="text"><![CDATA[环境准备：基于CentOS Linux release 7.6.1810 (Core) 控制节点（Controller）：eth0：192.100.10.160/24eth1：10.0.0.11/24eth2：预留 计算节点（Compute):eth0：192.100.10.161/24eth1：10.0.0.12/24eth2：预留 网卡0接口为管理网络 -&gt; 交换机 + 路由器网卡1接口为Overlay网络 -&gt; 目前直连 / 交换机连接网卡2接口为外部网络 -&gt; 路由器 -（可以先使用eth1作为外部网络下载Openstack安装所需资源，后修改） 通用密码： 123456 Controller节点：配置网卡信息： 12345# vi /etc/sysconfig/network-scripts/ifcfg-eth0BOOTPROTO=staticIPADDR=192.100.10.160NETMASK=255.255.255.0GATEWAY=192.100.10.1 1234# vi /etc/sysconfig/network-scripts/ifcfg-eth1BOOTPROTO=staticIPADDR=10.0.0.11NETMASK=255.255.255.0 配置主机信息： 12345# vi /etc/hosts# controller192.100.10.160 controller# compute192.100.10.161 compute 配置主机名：控制节点的主机名为controller，设置如下： 1~# hostnamectl set-hostname controller 对主机名进行验证： 1~# hostname 看到输出为controller即可 配置DNS： 12# vi /etc/resolv.confnameserver 114.114.114.114 Compute节点：配置管理网络： 12345# vi /etc/sysconfig/network-scripts/ifcfg-eth0BOOTPROTO=staticIPADDR=192.100.10.161NETMASK=255.255.255.0GATEWAY=192.100.10.1 1234# vi /etc/sysconfig/network-scripts/ifcfg-eth1BOOTPROTO=staticIPADDR=10.0.0.21NETMASK=255.255.255.0 配置主机信息： 12345# vi /etc/hosts# controller192.100.10.160 controller# compute192.100.10.161 compute 配置主机名：计算节点的主机名为compute，设置如下： 1~# hostnamectl set-hostname compute 对主机名进行验证： 1~# hostname 看到输出为compute即可 配置DNS： 12# vi /etc/resolv.confnameserver 114.114.114.114]]></content>
      <categories>
        <category>Openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Openstack Too many open files 错误与解决办法]]></title>
    <url>%2F2019%2F06%2F20%2FTooManyFiles%2F</url>
    <content type="text"><![CDATA[Openstack WebUI页面无法打开，页面报500错误，查看httpd-&gt;error_log日志报如下错误: 1234567891011[Tue Apr 02 14:01:05.658276 2019] [:error] [pid 9245] File &quot;/usr/lib/python2.7/site-packages/requests/sessions.py&quot;, line 518, in request[Tue Apr 02 14:01:05.658280 2019] [:error] [pid 9245] File &quot;/usr/lib/python2.7/site-packages/requests/sessions.py&quot;, line 639, in send[Tue Apr 02 14:01:05.658284 2019] [:error] [pid 9245] File &quot;/usr/lib/python2.7/site-packages/requests/adapters.py&quot;, line 438, in send[Tue Apr 02 14:01:05.658287 2019] [:error] [pid 9245] File &quot;/usr/lib/python2.7/site-packages/requests/packages/urllib3/connectionpool.py&quot;, line 588, in urlopen[Tue Apr 02 14:01:05.658291 2019] [:error] [pid 9245] File &quot;/usr/lib/python2.7/site-packages/requests/packages/urllib3/connectionpool.py&quot;, line 241, in _get_conn[Tue Apr 02 14:01:05.658296 2019] [:error] [pid 9245] File &quot;/usr/lib/python2.7/site-packages/requests/packages/urllib3/util/connection.py&quot;, line 27, in is_connection_dropped[Tue Apr 02 14:01:05.658300 2019] [:error] [pid 9245] File &quot;/usr/lib/python2.7/site-packages/requests/packages/urllib3/util/wait.py&quot;, line 33, in wait_for_read[Tue Apr 02 14:01:05.658304 2019] [:error] [pid 9245] File &quot;/usr/lib/python2.7/site-packages/requests/packages/urllib3/util/wait.py&quot;, line 22, in _wait_for_io_events[Tue Apr 02 14:01:05.658308 2019] [:error] [pid 9245] File &quot;/usr/lib/python2.7/site-packages/requests/packages/urllib3/util/selectors.py&quot;, line 581, in DefaultSelector[Tue Apr 02 14:01:05.658312 2019] [:error] [pid 9245] File &quot;/usr/lib/python2.7/site-packages/requests/packages/urllib3/util/selectors.py&quot;, line 394, in __init__[Tue Apr 02 14:01:05.658316 2019] [:error] [pid 9245] IOError: [Errno 24] Too many open files 解决方式：修改操作系统打开的文件数；登录到Controller节点，执行: 1234567891011121314151617[root@controller ~]# ulimit -acore file size (blocks, -c) 0data seg size (kbytes, -d) unlimitedscheduling priority (-e) 0file size (blocks, -f) unlimitedpending signals (-i) 60587max locked memory (kbytes, -l) 64max memory size (kbytes, -m) unlimitedopen files (-n) 1024pipe size (512 bytes, -p) 8POSIX message queues (bytes, -q) 819200real-time priority (-r) 0stack size (kbytes, -s) 8192cpu time (seconds, -t) unlimitedmax user processes (-u) 60587virtual memory (kbytes, -v) unlimitedfile locks (-x) unlimited 系统默认设置为1024。 使用命令查看当前打开文件数: 12[root@controller ~]# lsof | wc -l174911 修改vim /etc/security/limits.conf，在文件最后加入如下信息： 12* soft nofile 1024000* hard nofile 1024000 *表示所有用户，修改后重启服务器，配置生效。]]></content>
      <categories>
        <category>Openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[虚拟化纵向安装配置说明]]></title>
    <url>%2F2019%2F06%2F20%2F%E8%99%9A%E6%8B%9F%E5%8C%96%E7%BA%B5%E5%90%91%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[虚拟化纵向安装配置说明创建纵向组件[电力纵向] PS。创建主机组件[win7] PC。创建UKey组件 UKey。UKey插入PS。 配置PC。 IP地址：169.254.200.201 掩码：255.255.255.0 网关：169.254.200.1 PC网卡0与PS网卡4连接网线。PC本地安装纵向管理工具。 目录地址：d:/software/PSTunnel2000加密装置千兆管理工具.exe 添加新操作员。 右键 -&gt; 以管理员身份运行 -&gt; 操作员 -&gt; 操作员管理 -&gt; 添加：+操作员： user -&gt; 确定 导出导入证书。 -&gt; 初始化 -&gt; 生成设备密钥及证书请求 -&gt; 下一步 -&gt; 填写省/市/设备名 -&gt; 下一步 -&gt; 生成.csr证书 证书转换。使用证书工具2.0将.csr证书转换为.cer证书。传入对端。 -&gt; 证书 -&gt; 证书导入 -&gt; 远程设备证书 -&gt; 选择证书 -&gt; 确定 VLAN配置。 本地ETH1：192.168.1.100 255.255.255.0 VLAN：0 远程ETH1：192.168.1.200 255.255.255.0 VLAN：0 安全隧道。 -&gt; 恢复隧道配置 -&gt; 11.pbak -&gt; 配置写入装置 -&gt; 确定 -&gt; 修改隧道 -&gt; 确定 隧道名标识： 11 -&gt; 不支持修改 本地IP： 192.168.1.100 -&gt; 本地ETH1 远程IP： 192.168.1.200 -&gt; 远程ETH1 255.255.255.0 0.0.0.0 0.0.0.0 MTU： 1500 安全策略。 -&gt; 恢复策略配置 -&gt; 11.pbak -&gt; 配置写入装置 -&gt; 确定 -&gt; 修改策略 -&gt; 确定 标识id：0 本地IP： 192.168.1.100 -&gt; 本地ETH1 远程IP： 192.168.1.200 -&gt; 远程ETH1 本地起始IP：192.168.1.1 本地终止IP：192.168.1.254 远程起始IP：192.168.1.1 远程终止IP：192.168.1.254 方向：双向 重置隧道。 -&gt; 管理 -&gt; 重置隧道 -&gt; OPENED 注意： *新纵向的用户名,密码：root, Tun-2000 纵向内部查询路由命令：1$ monipead.arm -all]]></content>
      <categories>
        <category>Eletric Power</category>
      </categories>
      <tags>
        <tag>eletric power</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[KDPA RestAPI]]></title>
    <url>%2F2019%2F03%2F10%2FKDPA%20RestAPI%2F</url>
    <content type="text"><![CDATA[KDPA RestAPI定义及说明 1 主机实例 1-1 创建主机实例 1-2 删除主机实例 1-3 配置主机实例 1-4 启动主机实例 1-5 关闭主机实例 1-6 挂起主机实例 1-7 恢复主机实例 1-8 获取主机实例基本信息 1-9 主机实例控制台 1-10 重命名主机实例 1-11 创建浮动IP 1-12 删除浮动IP 1-13 获取浮动IP信息 1-14 批量关闭实例组件 1-15 获取所有组件的状态 2 网线 2-1 创建网线 2-2 删除网线 3 通用 3-1 清除当前用户的实验室环境 3-2 设置实训平台系统配置 3-3 获取系统网卡信息及预留网段信息 3-4 用户实验室环境未保存退出 3-5 获取系统资源 3-6 获取系统资源使用率 3-7 按日期获取系统资源使用率 4 系统 4-1 创建镜像 4-2 删除镜像 5 纵向 5-1 创建纵向 5-2 删除纵向 6 串口线 6-1 创建串口线连接 6-2 删除串口线连接 7 UKEY 7-1 创建UKEY 7-2 删除UKEY 7-3 创建UKEY与纵向实例的连接 7-4 删除UKEY与纵向实例的连接 8 隔离 8-1 创建隔离 8-2 删除隔离 8-3 启动隔离 8-4 关闭隔离 8-5 挂起隔离 8-6 恢复隔离 8-7 隔离控制台 8-8 隔离创建浮动IP 8-9 隔离删除浮动IP 8-10 创建隔离镜像 8-11 删除隔离镜像 6-2 删除串口线连接 9 虚拟交换机 9-1 创建Untag虚拟交换机 9-2 删除Untag虚拟交换机 9-3 创建虚拟交换机 9-4 删除虚拟交换机 9-5 启动虚拟交换机 9-6 关闭虚拟交换机 9-7 设置虚拟交换机端口 9-8 获取被占用vlan 10 虚拟路由器 10-1 创建虚拟路由器 10-2 删除虚拟路由器 10-3 查看虚拟路由器配置 10-4 虚拟路由器上传镜像 10-5 虚拟路由器删除镜像 Notice: 1.以下所有API的方法都为POST 2.传参及返回值都为json格式，通用返回值格式为: {“code”: 状态码, “data”: 数据 }。 状态码为 0 代表操作成功，其他代表操作失败 3.api地址中，controller为计算节点的IP地址（已配置在主机配置文件中。8000为系统默认提供服务的端口号。 4.*参数为必填参数，其余为非必填，非必填参数系统传参默认值。 限制: 1.所有组件: 所有组件在关机状态下不能连接网线，不能删除网线。 实验室环境在未点击保存时会被清理，如有需要，手动点击保存按钮。 2.主机: 处于有网线连接或者关机状态下的主机不能修改配置。 处于挂起状态下的主机只能执行恢复操作，不能执行其他操作。 3.纵向: UKEY与纵向连接后，不能直接删除纵向，必须先拔出UKEY。 纵向与纵向之间通过网卡1连接，处理业务，如果纵向与纵向之间通过其他网卡连接，不予处理。 4.串口线: 串口线目前仅支持主机、隔离。 5.虚拟路由器: 虚拟路由器定义的配置在初始化后不能修改。 虚拟路由器与主机通过网线连接两端的网段必须相同。 6.虚拟交换机: 虚拟交换机与虚拟交换机不能通过网线连接。 虚拟交换机VLAN接口只能连接虚拟组件，虚实接口只能连接实体组件。 不同虚拟交换机中的VLAN ID不能重复。 在接口有连接的情况下，不能修改虚拟交换机端口的类型（VLAN接口/虚实接口）。 7.其他问题: 虚拟路由器与虚拟交换机网线连接后，目前虚拟路由器重启DHCP获取不到IP，导致虚拟路由器不可用。 虚拟路由器与主机组件之间有其他组件的情况下，需要手动为主机配置远端静态路由。 1主机实例1-1创建主机实例Request Method: POST API: 123456789101112- Params: - **uuid**(str.)*: 主机UUID，唯一标识，必填，长度1~63 - **name**(str.)*: 主机名称，必填，长度1~63 - **imageName**(str.)*: 镜像名称，必填，长度1~63 - **userId**(int.)*: 用户ID，必填 - template(int.): 模板类型，非必填， - 1代表 1 vcpu, 1G ram, 10G disk - 2代表 2 vcpu, 2G ram, 20G disk### 1-2删除主机实例#### Request- Method: **POST**- API: ```http://controller:8000/api/instance/delete Params: uuid(str.)*: 主机UUID，唯一标识，必填，长度1~63 1-3配置主机实例Request Method: POST API: 1234567891011- Params: - **uuid**(str.)*: 主机UUID，唯一标识，必填，长度1~63 - **ipAddr**(str.)*: IPv4地址，必填，例如:192.168.1.100 - netmask(str.): 掩码地址，非必填，默认值为”255.255.255.0” - gateway(str.): 网关地址，非必填 - number(int.): 网卡编号，非必填，默认值为1，表示主机目前都为1块网卡### 1-4启动主机实例#### Request- Method: **POST**- API: ```http://controller:8000/api/instance/start Params: uuid(str.)*: 主机UUID，唯一标识，必填，长度1~63 1-5关闭主机实例Request Method: POST API: 1234567- Params: - **uuid**(str.)*: 主机UUID，唯一标识，必填，长度1~63### 1-6挂起主机实例#### Request- Method: **POST**- API: ```http://controller:8000/api/instance/suspend Params: uuid(str.)*: 主机UUID，唯一标识，必填，长度1~63 1-7恢复主机实例Request Method: POST API: 1234567- Params: - **uuid**(str.)*: 主机UUID，唯一标识，必填，长度1~63### 1-8获取主机实例基本信息#### Request- Method: **POST**- API: ```http://controller:8000/api/instance/show Params: uuid(str.)*: 主机UUID，唯一标识，必填，长度1~63 Response Body123456789101112131415&#123; &quot;code&quot;: 0, &quot;data&quot;: &#123; &quot;name&quot;: &quot;HOST_1&quot;, &quot;state&quot;: &quot;Up&quot;, &quot;interface&quot;: [&#123; &quot;macAddr&quot;: &quot;fa:16:3e:62:7b:cb&quot;, // MAC地址 &quot;ipAddr&quot;: &quot;192.168.1.5&quot;, // IP地址 &quot;number&quot;: 0, // 网卡编号 &quot;netmask&quot;: &quot;255.255.255.0&quot;, // 掩码地址 &quot;cidr&quot;: &quot;192.168.1.0/24&quot;, // 网段地址 &quot;gateway&quot;: &quot;192.168.1.1&quot; // 网关地址 &#125;] &#125;&#125; 1-9主机实例控制台Request Method: POST API: 12345- Params: - **uuid**(str.)*: 主机UUID，唯一标识，必填，长度1~63#### Response- Body { “code”: 0, “data”: { “console”: { “url”: “http://controller:6080/vnc_auto.html?token=aca31aec-fd05-46e4-9618-0e409c1e8b1e&quot;, “type”: “novnc” } }} 12345### 1-10重命名主机实例#### Request- Method: **POST**- API: ```http://controller:8000/api/instance/rename Params: uuid(str.)*: 主机UUID，唯一标识，必填，长度1~63 currentName(str.)*: 修改后主机名称，必填，长度1~63 1-11创建浮动IPRequest Method: POST API: 1234567- Params: - **uuid**(str.)*: 主机UUID，唯一标识，必填，长度1~63 ### 1-12删除主机浮动IP#### Request- Method: **POST**- API: ```http://controller:8000/api/instance/deleteFIP Params: uuid(str.)*: 主机UUID，唯一标识，必填，长度1~63 1-13获取浮动IP信息Request Method: POST API: 12345- Params: - **uuid**(str.)*: 主机UUID，唯一标识，必填，长度1~63#### Response- Body { “code”: 0, “data”: { “ftpHost”: “192.100.10.146”, “ftpPath”: ftp://192.100.10.146/ “username”: “ftpuser”, “passwd”: “ftpuser123”, “windowsPath”: “c:\ftpuser\“, “linuxPath”: “/home/ftpuser/“, }} 12345### 1-14批量关闭实例组件#### Request- Method: **POST**- API: ```http://controller:8000/api/instance/batchStop Params: userId(int.)*: 用户ID，必填 1-15获取所有组件的状态Request Method: POST API: 12345- Params: - **userId**(int.)*: 用户ID，必填#### Response- Body { “code”: 0, “data”: { “lineList”: [], “instanceList”: [{ “state”: “Up”, “uuid”: “n-djsgs10124o”, “ukeyid”: “n-fds52326574vf” }] }} 12345678state: 包括 ”UP”: 开机，”Down”：关机，“Suspend”：挂起。## 2网线### 2-1创建网线#### Request- Method: **POST**- API: ```http://controller:8000/api/netline/create Params: uuid(str.)*: 源组件UUID，唯一标识，必填，长度1~63 dstUuid(str.)*: 网线对端组件UUID，必填，长度1~63 netlineUuid(int.)*: 网线UUID，必填，网线的唯一标识 userId(int.)*: 用户ID，必填 number(int.): 网卡编号，非必填，默认值为1，表示主机的第1块网卡 dstNumber(int.): 网线对端网设备卡编号，非必填，默认值为1 vlan(int.): 连接网线时所占用的vlan标签，非必填，默认值为0 0: 默认值，表示当前连接的网线为常规网线，即虚拟组件与虚拟组件连接 14094: 当vlan为14094之前的正整数时，表示此网线为虚实连线，vlan标签表示外部实体设备实际的vlan标签，此标签每个实体设备间不能相同。 2-2删除网线Request Method: POST API: 12345678910- Params: - **uuid**(str.)*: 网线UUID，唯一标识，必填，长度1~63 - **userId**(int.)*: 用户ID，必填## 3通用### 3-1清除当前用户的实验室环境#### Request- Method: **POST**- API: ```http://controller:8000/api/env/clear Params: userId(int.)*: 用户ID，必填 3-2设置实训平台系统配置Request Method: POST API: 1234567- Params: - **maxVmNumber**(str.)*: 用户最大创建虚拟机数量，默认值为10### 3-3获取系统网卡信息及预留网段信息#### Request- Method: **POST**- API: ```http://controller:8000/api/system/info Params: 无 Response Body12345678910111213141516171819202122232425262728293031323334353637383940414243444546&#123; &quot;code&quot;: 0, &quot;data&quot;: &#123; &quot;networkParameters&quot;: [&#123; &quot;nodeType&quot;: &quot;控制节点&quot;, &quot;nodeName&quot;: &quot;controller&quot;, &quot;interfaceInfo&quot;: [&#123; &quot;ethName&quot;: &quot;enp2s0&quot;, &quot;ipAddr&quot;: &quot;192.100.10.58&quot; &#125;, &#123; &quot;ethName&quot;: &quot;enp3s0&quot;, &quot;ipAddr&quot;: &quot;10.0.0.11&quot; &#125;] &#125;,&#123; &quot;nodeType&quot;: &quot;计算节点&quot;, &quot;nodeName&quot;: &quot;compute1&quot;, &quot;interfaceInfo&quot;: [&#123; &quot;ethName&quot;: &quot;enp0s31f6&quot;, &quot;ipAddr&quot;: &quot;192.100.10.160&quot; &#125;, &#123; &quot;ethName&quot;: &quot;enp0s20f0u8&quot;, &quot;ipAddr&quot;: &quot;10.0.0.31&quot; &#125;] &#125;] , &quot;reserveCidr&quot;: [ &#123; &quot;name&quot;: &quot;浮动IP网段&quot;, &quot;cidr&quot;: [&#123; &quot;start&quot;: &quot;192.100.10.140&quot;, &quot;end&quot;: &quot;192.100.10.141&quot; &#125;, &#123; &quot;start&quot;: &quot;192.100.10.161&quot;, &quot;end&quot;: &quot;192.100.10.169&quot; &#125;, &#123; &quot;start&quot;: &quot;192.100.10.144&quot;, &quot;end&quot;: &quot;192.100.10.149&quot; &#125;] &#125;,&#123; &quot;name&quot;: &quot;Overlay网段&quot;, &quot;cidr&quot;: [&#123; &quot;start&quot;: &quot;10.0.0.11&quot;, &quot;end&quot;: &quot;10.0.0.30&quot; &#125; ] &#125;,&#123; &quot;name&quot;: &quot;内部网段&quot;, &quot;cidr&quot;: [&#123; &quot;start&quot;: &quot;20.0.0.2&quot;, &quot;end&quot;: &quot;20.0.0.254&quot; &#125; ] &#125; ] &#125;&#125; 3-4用户实验室环境未保存退出Request Method: POST API: 12345678910- Params: - **instanceList**(list.)*: 实例组件uuid列表，必填 - **netlineList**(list.)*: 网线组件uuid列表，必填 - **userId**(int.)*: 用户ID，必填 - **clickF5**(str)*: 是否点击F5进行刷新，默认为&quot;False&quot;,非必填 ### 3-5获取系统资源#### Request- Method: **POST**- API: ```http://controller:8000/api/system/resource Params: 无 Response Body1234567891011121314151617&#123; &quot;code&quot;: 0, &quot;data&quot;: &#123; &quot;nodeNumber&quot;: 2, # 节点数量 &quot;runningNodeNumber&quot;: 2, # 正在运行的节点数量 &quot;instanceNumber&quot;: 2, # 实例数量 &quot;vcpuUsed&quot;: 3, # VCPU使用量 个数 &quot;vcpuTotal&quot;: 24, # VCPU总量 个数 &quot;vcpu&quot;: &quot;3/24&quot;, # VCPU使用情况 个数 &quot;memoryUsed&quot;: 4.0, # 内存使用量 GB &quot;memoryTotal&quot;: 23.8, # 内存总量 GB &quot;memory&quot;: &quot;4.0/23.8&quot;, # 内存使用情况 GB &quot;diskUsed&quot;: 30, # 磁盘使用量 GB &quot;diskTotal&quot;: 2198, # 磁盘总量 GB &quot;disk&quot;: &quot;30/2198&quot; # 磁盘使用情况 GB &#125;&#125; 3-6获取系统资源使用率Request Method: POST API: 12345- Params: - 无 #### Response- Body { “code”: 0, “data”: { “cpu”: [“4.1”, “4.1”, “3.9”, “4.6”], “memory”: [“67.6”, “67.8”, “67.8”, “67.9”], “disk”: [“5.7”, “5.7”, “5.7”, “5.7”], “net_out”: [“0”, “653”, “17702”, “0”], “net_in”: [“0”, “2203”, “18517”, “0”], “time”: [ “2019-06-14 07:38:01”, “2019-06-14 07:38:10”, “2019-06-14 07:38:20”, “2019-06-14 07:38:30”] }} 12345### 3-7按日期获取系统资源使用率#### Request- Method: **POST**- API: ```http://controller:8000/api/system/dateUsage Params: date(str.)*: 日期，例：”2019-06-17” Response Body1234567891011121314151617&#123; &quot;code&quot;: 0, &quot;data&quot;: &#123; &quot;memory&quot;: [&quot;71.8&quot;, &quot;74.5&quot;, &quot;74.5&quot;, &quot;74.5&quot;, &quot;74.1&quot;], &quot;net_out&quot;: [&quot;0&quot;, &quot;772940&quot;, &quot;130350&quot;, &quot;167966&quot;, &quot;172898&quot;], &quot;net_in&quot;: [&quot;0&quot;, &quot;14704&quot;, &quot;3530&quot;, &quot;4194&quot;, &quot;4442&quot;], &quot;time&quot;: [ &quot;2019-06-17 02:00:02&quot;, &quot;2019-06-17 03:00:02&quot;, &quot;2019-06-17 04:00:02&quot;, &quot;2019-06-17 05:00:02&quot;, &quot;2019-06-17 06:00:02&quot; ], &quot;disk&quot;: [&quot;5.7&quot;, &quot;5.7&quot;, &quot;5.7&quot;, &quot;5.7&quot;, &quot;5.7&quot;], &quot;cpu&quot;: [&quot;4.6&quot;, &quot;13.2&quot;, &quot;13.8&quot;, &quot;13.6&quot;, &quot;13.5&quot;] &#125;&#125; 4系统4-1创建镜像Request Method: POST API: 1234567891011121314- Params: - **name**(str.)*: 镜像名称，必填 - **url**(str.)*: 镜像路径，必填 - defaultVCPU(int.): 默认虚拟CPU个数，非必填，默认值1 - defaultRAM(int.): 默认内存大小，非必填，单位MB，默认值1024 - defaultDISK (int.): 默认磁盘大小，非必填，单位GB，默认值10 - advancedVCPU(int.): 高级虚拟CPU个数，非必填，默认值2 - advancedRAM (int.): 高级内存大小，非必填，默认值2048 - advancedDISK (int.): 高级磁盘大小，非必填，单位GB，默认值20 ### 4-2删除镜像#### Request- Method: **POST**- API: ```http://controller:8000/api/image/delete Params: name(str.)*: 镜像名称，必填 5纵向5-1创建纵向Request Method: POST API: 123456789101112- Params: - **uuid**(str.)*: 纵向UUID，唯一标识，必填，长度1~63 - **name**(str.)*: 纵向名称，必填，长度1~63 - **userId**(int.)*: 用户ID，必填 - template(int.): 模板类型，非必填， - 1代表 1 vcpu, 1G ram, 10G disk - 2代表 2 vcpu, 2G ram, 20G disk### 5-2删除纵向#### Request- Method: **POST**- API: ```http://controller:8000/api/pstunnel/delete Params: uuid(str.)*: 纵向UUID，唯一标识，必填，长度1~63 6串口线6-1创建串口线连接Request Method: POST API: 123456789101112- Params: - **uuid**(str.)*: 实例组件UUID，唯一标识，必填，长度1~63 - **dstUuid**(str.)*: 目的实例组件UUID，唯一标识，必填，长度1~63 - **seriallineUuid**(str.)*: 串口线UUID，唯一标识，必填，长度1~63 - **userId**(int.)*: 用户ID，必填 - number(int.): 默认值为0。对于主机，数值无意义。对于隔离，0==内隔离串口，1==外隔离串口 - dstNumber(int.): 默认值为0。对于主机，数值无意义。对于隔离，0==内隔离串口，1==外隔离串口### 6-2删除串口线连接#### Request- Method: **POST**- API: ```http://controller:8000/api/serline/delete Params: uuid(str.)*: 串口线UUID，唯一标识，必填，长度1~63 userId(int.)*: 用户ID，必填 7UKEY7-1创建UKEYRequest Method: POST API: 123456789- Params: - **uuid**(str.)*: UKEY UUID，唯一标识，必填，长度1~63 - **name**(str.)*: UKEY 名称，必填，长度1~63 - **userId**(int.)*: 用户ID，必填### 7-2删除UKEY#### Request- Method: **POST**- API: ```http://controller:8000/api/ukey/delete Params: uuid(str.)*: UKEY UUID，唯一标识，必填，长度1~63 userId(int.)*: 用户ID，必填 7-3创建UKEY与纵向实例的连接Request Method: POST API: 123456789- Params: - **uuid**(str.)*: UKEY UUID，唯一标识，必填，长度1~63 - **psUuid**(str.)*: 纵向UUID，唯一标识，必填，长度1~63 - **userId**(int.)*: 用户ID，必填### 7-4删除UKEY与纵向实例的连接#### Request- Method: **POST**- API: ```http://controller:8000/api/ukey/disconnect Params: uuid(str.)*: UKEY UUID，唯一标识，必填，长度1~63 psUuid(str.)*: 纵向UUID，唯一标识，必填，长度1~63 userId(int.)*: 用户ID，必填 8隔离8-1创建隔离Request Method: POST API: 12345678910111213- Params: - **uuid**(str.)*: 隔离UUID，唯一标识，必填，长度1~63 - **name**(str.)*: 隔离名称，必填，长度1~63 - **imageName**(str.)*: 隔离镜像名称，必填，长度1~63 - **userId**(int.)*: 用户ID，必填 - template(int.): 模板类型，非必填， - 1代表 1 vcpu, 1G ram, 10G disk - 2代表 2 vcpu, 2G ram, 20G disk### 8-2删除隔离#### Request- Method: **POST**- API: ```http://controller:8000/api/stonewall/delete Params: uuid(str.)*: 隔离UUID，唯一标识，必填，长度1~63 userId(int.)*: 用户ID，必填 8-3启动隔离Request Method: POST API: 1234567- Params: - **uuid**(str.)*: 隔离UUID，唯一标识，必填，长度1~63### 8-4关闭隔离#### Request- Method: **POST**- API: ```http://controller:8000/api/stonewall/stop Params: uuid(str.)*: 隔离UUID，唯一标识，必填，长度1~63 8-5挂起隔离Request Method: POST API: 1234567- Params: - **uuid**(str.)*: 隔离UUID，唯一标识，必填，长度1~63### 8-6恢复隔离#### Request- Method: **POST**- API: ```http://controller:8000/api/stonewall/resume Params: uuid(str.)*: 隔离UUID，唯一标识，必填，长度1~63 8-7隔离控制台Request Method: POST API: 123456- Params: - **uuid**(str.)*: 隔离UUID，唯一标识，必填，长度1~63 - number(int.): 标识内网/外网隔离，值范围：0/1，0代表内，1代表外，默认值为0#### Response- Body { “code”: 0, “data”: { “console”: { “url”: “http://controller:6080/vnc_auto.html?token=aca31aec-fd05-46e4-9618-0e409c1e8b1e&quot;, “type”: “novnc” } }} 12345### 8-8隔离创建浮动IP#### Request- Method: **POST**- API: ```http://controller:8000/api/stonewall/createFIP Params: uuid(str.)*: 隔离UUID，唯一标识，必填，长度1~63 number(int.): 标识内网/外网隔离，值范围：0/1，0代表内，1代表外，默认值为0 8-9隔离删除浮动IPRequest Method: POST API: 12345678- Params: - **uuid**(str.)*: 隔离UUID，唯一标识，必填，长度1~63 - number(int.): 标识内网/外网隔离，值范围：0/1，0代表内，1代表外，默认值为0### 8-10创建隔离镜像#### Request- Method: **POST**- API: ```http://controller:8000/api/stonewall/createImg Params: name(str.)*: 镜像名称，必填 urlInt(str.)*: 内镜像路径，必填 urlExt(str.)*: 外镜像路径，必填 defaultVCPU(int.): 默认虚拟CPU个数，非必填，默认值1 defaultRAM(int.): 默认内存大小，非必填，单位MB，默认值1024 defaultDISK (int.): 默认磁盘大小，非必填，单位GB，默认值10 advancedVCPU(int.): 高级虚拟CPU个数，非必填，默认值2 advancedRAM (int.): 高级内存大小，非必填，默认值2048 advancedDISK (int.): 高级磁盘大小，非必填，单位GB，默认值20 8-11删除隔离镜像Request Method: POST API: 123456789101112131415- Params: - **name**(str.)*: 镜像名称，必填## 9虚拟交换机### 9-1创建Untag虚拟交换机#### Request- Method: **POST**- API: `http://controller:8000/api/switch/createUntagSwitch`- Params: - **uuid&lt;str, 必填&gt;**: 虚拟交换机UUID，唯一标识吗 - **name&lt;str, 必填&gt;**: 虚拟交换机名称 - **userId&lt;str, 必填&gt;**: 用户ID - *number&lt;str, 非必填&gt;*: 虚拟交换机网口数量，默认值8#### Response { “code”: API执行结果码，0-执行成功，其他正整数-执行失败的错误信息编码;} 1234567### 9-2删除Untag虚拟交换机#### Request- Method: **POST**- API: `http://controller:8000/api/switch/deleteUntagSwitch`- Params: - **uuid&lt;str, 必填&gt;**: 虚拟交换机UUID，唯一标识吗#### Response { “code”: API执行结果码，0-执行成功，其他正整数-执行失败的错误信息编码;} 12345678910### 9-3创建虚拟交换机#### Request- Method: **POST**- API: `http://controller:8000/api/switch/create`- Params: - **uuid&lt;str, 必填&gt;**: 虚拟交换机UUID，唯一标识吗 - **name&lt;str, 必填&gt;**: 虚拟交换机名称 - **userId&lt;str, 必填&gt;**: 用户ID - *number&lt;str, 非必填&gt;*: 虚拟交换机网口数量，默认值8#### Response { “code”: API执行结果码，0-执行成功，其他正整数-执行失败的错误信息编码;} 1234567### 9-4删除虚拟交换机#### Request- Method: **POST**- API: `http://controller:8000/api/switch/delete`- Params: - **uuid&lt;str, 必填&gt;**: 虚拟交换机UUID，唯一标识吗#### Response { “code”: API执行结果码，0-执行成功，其他正整数-执行失败的错误信息编码;} 1234567### 9-5启动虚拟交换机#### Request- Method: **POST**- API: `http://controller:8000/api/switch/start`- Params: - **uuid&lt;str, 必填&gt;**: 虚拟交换机UUID，唯一标识吗#### Response { “code”: API执行结果码，0-执行成功，其他正整数-执行失败的错误信息编码;} 1234567### 9-6关闭虚拟交换机#### Request- Method: **POST**- API: `http://controller:8000/api/switch/stop`- Params: - **uuid&lt;str, 必填&gt;**: 虚拟交换机UUID，唯一标识吗#### Response { “code”: API执行结果码，0-执行成功，其他正整数-执行失败的错误信息编码;} 123456789101112### 9-7设置虚拟交换机端口#### Request- Method: **POST**- API: `http://controller:8000/api/switch/configSwitchPort`- Params: - **uuid&lt;str, 必填&gt;**: 虚拟交换机UUID，唯一标识吗 - **number&lt;str, 必填&gt;**: 虚拟交换机端口序号，从0开始，最大值由交换机端口数量决定，必填 - **vlan&lt;str, 必填&gt;**: 端口将要设置的具体vlan标签 - *-1*：表示端口要设置成为【虚实口】 - *0*： 表示端口默认状态，此状态下端口不可用，即不能连接网线 - *1~4094*：表示端口设置为【vlan口】，vlan标签为1至4094之间的任意正整数#### Response { “code”: API执行结果码，0-执行成功，其他正整数-执行失败的错误信息编码;} 1234567### 9-8获取被占用vlan#### Request- Method: **POST**- API: `http://controller:8000/api/switch/getUsedVlanList`- Params: - **uuid&lt;str, 必填&gt;**: 虚拟交换机UUID，唯一标识吗#### Response { “code”: API执行结果码，0-执行成功，其他正整数-执行失败的错误信息编码; “data”: [1, 23, 129, …]} 1234567## 10虚拟路由器### 10-1创建虚拟路由器#### Request- Method: **POST**- API: ```http://controller:8000/api/router/create Params: uuid(str.)*: 虚拟路由器UUID，唯一标识，必填，长度1~63 name(str.)*: 虚拟路由器名称，必填，长度1~63 number(int.)*: 虚拟路由器接口数量，默认值为2，必填 cidrList(list.)*: 虚拟路由器网段列表，必填 例如：[“192.168.1.0/24”, “192.168.2.0/24”] 网段的格式：网段地址/掩码位数， 网段不能重复。 imageName(str.)*: 镜像名称，必填，长度1~63 userId(int.)*: 用户ID，必填 10-2删除虚拟路由器Request Method: POST API: 1234567- Params: - **uuid**(str.)*: 虚拟路由器UUID，唯一标识，必填，长度1~63### 10-3查看虚拟路由器配置 #### Request- Method: **POST**- API: ```http://controller:8000/api/router/show Params: uuid(str.)*: 虚拟路由器UUID，唯一标识，必填，长度1~63 Response Body123456789101112131415&#123; &quot;code&quot;: 0, &quot;data&quot;: [ &#123; &quot;number&quot;: 0, &quot;cidr&quot;: &quot;192.168.1.0/24&quot;, &quot;gateway&quot;: &quot;192.168.1.1&quot; &#125;, &#123; &quot;number&quot;: 1, &quot;cidr&quot;: &quot;192.168.2.0/24&quot;, &quot;gateway&quot;: &quot;192.168.2.1&quot; &#125; ]&#125; 10-4虚拟路由器上传镜像Request Method: POST API: 12345678910- Params: - **name**(str.)*: 镜像名称，必填 - **url**(str.)*: 镜像路径，必填 虚拟路由器镜像默认1VCPU，1G内存，10G磁盘### 10-5虚拟路由器删除镜像 #### Request- Method: **POST**- API: ```http://controller:8000/api/router/deleteImg Params: name(str.)*: 镜像名称，必填]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
