<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SQLAlchemy 中的 Engine 是什么]]></title>
    <url>%2F2019%2F07%2F17%2FSQLAlchemyEngine%2F</url>
    <content type="text"><![CDATA[连接池很重要，因为每次发送sql查询的时候都需要先建立连接，如果程序启动的时候事先就初始化一批连接放在连接池，每次用完后又放回连接池给其它请求使用，就能大大提高查询的效率。 Engine 初始化Engine 的初始化非常简单，通过工厂函数 create_engine 就可以创建。 123from sqlalchemy import create_engineengine = create_engine('mysql://user:password@localhost:3306/test?charset=utf8') 构建好 Engine 对象的同时，连接池和Dialect也创建好了，但是这时候并不会立马与数据库建立真正的连接，只有你调用 Engine.connect() 或者 Engine.execute(sql) 执行SQL请求的时候，才会建立真正的连接。因此 Engine 和 Pool 的行为称之为延迟初始化，等真正要派上用场的时候才去建立连接。 需要注意的是，创建引擎时，如果数据库的密码含有特殊字符，需要先编码处理 123&gt;&gt;&gt; import urllib.parse&gt;&gt;&gt; urllib.parse.quote_plus("kx%jj5/g")'kx%25jj5%2Fg' 其它数据库方言初始化 engine 的方式可参考官方文档： https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls create_engine 还有很多可选参数，这里介绍几个重要的参数。 12345engine = create_engine('mysql://user:password@localhost:3306/test?charset=utf8', echo=False pool_size=100, pool_recycle=3600, pool_pre_ping=True) echo ：为 True 时候会把sql语句打印出来，当然，你可以通过配置logger来控制输出，这里不做讨论。 pool_size： 是连接池的大小，默认为5个，0表示连接数无限制 pool_recycle： MySQL 默认情况下如果一个连接8小时内容没有任何动作（查询请求）就会自动断开链接，出现 MySQL has gone away的错误。设置了 pool_recycle 后 SQLAlchemy 就会在指定时间内回收连接。如果设置为3600 就表示 1小时后该连接会被自动回收。 pool_pre_ping ： 这是1.2新增的参数，如果值为True，那么每次从连接池中拿连接的时候，都会向数据库发送一个类似 select 1 的测试查询语句来判断服务器是否正常运行。当该连接出现 disconnect 的情况时，该连接连同pool中的其它连接都会被回收。 参考链接： https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls https://stackoverflow.com/questions/34322471/sqlalchemy-engine-connection-and-session-difference https://docs.sqlalchemy.org/en/13/core/pooling.html#dealing-with-disconnects]]></content>
      <categories>
        <category>SQLAlchemy</category>
      </categories>
      <tags>
        <tag>sqlalchemy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux top 命令详解]]></title>
    <url>%2F2019%2F07%2F12%2Ftop%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425$ toptop - 10:14:44 up 15 days, 20:18, 8 users, load average: 6.99, 3.36, 2.62Tasks: 985 total, 2 running, 983 sleeping, 0 stopped, 0 zombie%Cpu(s): 0.7 us, 13.2 sy, 7.2 ni, 78.7 id, 0.1 wa, 0.0 hi, 0.0 si, 0.0 stKiB Mem : 16142800 total, 1201456 free, 14020500 used, 920844 buff/cacheKiB Swap: 8191996 total, 6339272 free, 1852724 used. 1396492 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND22195 root 20 0 4995348 264576 18712 S 7.9 1.6 26:02.20 gnome-shell28393 root 26 6 438932 95064 6416 S 3.3 0.6 16:52.90 python25155 root 20 0 163096 3436 1684 S 1.7 0.0 0:22.93 top 4092 root 20 0 413152 96096 4812 S 1.3 0.6 33:59.19 Xvnc23570 nova 26 6 456196 29632 4524 S 1.3 0.2 131:28.54 nova-conductor23724 nova 26 6 513364 42712 4908 S 1.3 0.3 135:03.59 nova-api12833 neutron 26 6 497996 135052 4608 S 1.0 0.8 59:59.61 neutron-dhcp-ag20537 nobody 20 0 254952 10144 4152 S 1.0 0.1 0:01.45 php-fpm28987 root 20 0 162940 3248 1620 R 1.0 0.0 0:00.22 top 5016 root 20 0 527732 3760 1500 S 0.7 0.0 0:34.49 ibus-daemon 7012 root 20 0 928104 26384 8988 S 0.7 0.2 9:19.03 gnome-terminal- 8040 openvsw+ 26 6 1316280 160352 12192 S 0.7 1.0 170:13.54 ovs-vswitchd 9408 etcd 26 6 11.6g 9896 2052 S 0.7 0.1 176:00.49 etcd23586 glance 26 6 502376 13540 4984 R 0.7 0.1 99:49.88 glance-api 1 root 26 6 201696 5700 2100 S 0.3 0.0 5:16.81 systemd 3 root 20 0 0 0 0 S 0.3 0.0 1:49.34 ksoftirqd/0 统计信息区前五行是系统整体的统计信息。 第一行是任务队列信息，同 uptime。 命令的执行结果。其内容如下： 10:14:44 系统当前时间 up 15 days, 20:18 系统运行时间，格式为时:分 8 users 当前登录用户数 load average: 6.99, 3.36, 2.62 系统负载，即任务队列的平均长度。 三个数值分别为1分钟、5分钟、15分钟前到现在的平均值。 第二、三行为进程和CPU的信息。当有多个CPU时，这些内容可能会超过两行。内容如下： Tasks: 985 total 进程总数 2 running 正在运行的进程数 983 sleeping 睡眠的进程数 0 stopped 停止的进程数 0 zombie 僵尸进程数 Cpu(s): 0.7% us 用户空间占用CPU百分比 13.2% sy 内核空间占用CPU百分比 7.2% ni 用户进程空间内改变过优先级的进程占用CPU百分比 78.7% id 空闲CPU百分比 0.1% wa 等待输入输出的CPU时间百分比 0.0% hi 0.0% si 最后两行为内存信息。内容如下： Mem: 16142800 total 物理内存总量 14020500 used 使用的物理内存总量 1201456 free 空闲内存总量 920844 buff/cache 用作内核缓存的内存量 Swap: 8191996 total 交换区总量 1852724k used 使用的交换区总量 6339272 free 空闲交换区总量 1396492 avail Mem 统计信息区域的下方显示了各个进程的详细信息。首先来认识一下各列的含义。 序号 列名 含义 a PID 进程id b PPID 父进程id c RUSER Real user name d UID 进程所有者的用户id e USER 进程所有者的用户名 f GROUP 进程所有者的组名 g TTY 启动进程的终端名。不是从终端启动的进程则显示为 ? h PR 优先级 i NI nice值。负值表示高优先级，正值表示低优先级 j P 最后使用的CPU，仅在多CPU环境下有意义 k %CPU 上次更新到现在的CPU时间占用百分比 l TIME 进程使用的CPU时间总计，单位秒 m TIME+ 进程使用的CPU时间总计，单位1/100秒 n %MEM 进程使用的物理内存百分比 o VIRT 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES p SWAP 进程使用的虚拟内存中，被换出的大小，单位kb。 q RES 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA r CODE 可执行代码占用的物理内存大小，单位kb s DATA 可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb t SHR 共享内存大小，单位kb u nFLT 页面错误次数 v nDRT 最后一次写入到现在，被修改过的页面数。 w S 进程状态。 D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程 x COMMAND 命令名/命令行 y WCHAN 若该进程在睡眠，则显示睡眠中的系统函数名 z Flags 任务标志，参考 默认情况下仅显示比较重要的PID、USER、PR、NI、VIRT、RES、SHR、S、%CPU、%MEM、TIME+、COMMAND列。可以通过下面的快捷键来更改显示内容。更改显示内容通过 f 键可以选择显示的内容。按 f 键之后会显示列的列表，按 a-z 即可显示或隐藏对应的列，最后按回车键确定。按 o 键可以改变列的显示顺序。按小写的 a-z 可以将相应的列向右移动，而大写的 A-Z可以将相应的列向左移动。最后按回车键确定。按大写的 F 或 O 键，然后按 a-z 可以将进程按照相应的列进行排序。而大写的 R 键可以将当前的排序倒转。 命令使用1．工具（命令）名称top 2．工具（命令）作用显示系统当前的进程和其他状况；top是一个动态显示过程,即可以通过用户按键来不断刷新当前状态.如果在前台执行该命令,它将独占前台,直到用户终止该程序为止.比较准确的说,top命令提供了实时的对系统处理器的状态监视.它将显示系统中CPU最“敏感”的任务列表.该命令可以按CPU使用.内存使用和执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定. 3．环境设置在Linux下使用。 4．使用方法4．1使用格式top [-][d][p][q][c][C][S][s][n] 4．2参数说明 d 指定每两次屏幕信息刷新之间的时间间隔。当然用户可以使用s交互命令来改变之。 p 通过指定监控进程ID来仅仅监控某个进程的状态。 q 该选项将使top没有任何延迟的进行刷新。如果调用程序有超级用户权限，那么top将以尽可能高的优先级运行。 S 指定累计模式 s 使top命令在安全模式中运行。这将去除交互命令所带来的潜在危险。 i 使top不显示任何闲置或者僵死进程。 c 显示整个命令行而不只是显示命令名 4.3其他下面介绍在top命令执行过程中可以使用的一些交互命令。从使用角度来看，熟练的掌握这些命令比掌握选项还重要一些。这些命令都是单字母的，如果在命令行选项中使用了s选项，则可能其中一些命令会被屏蔽掉。 Ctrl+L 擦除并且重写屏幕。 h或者? 显示帮助画面，给出一些简短的命令总结说明。 k 终止一个进程。系统将提示用户输入需要终止的进程PID，以及需要发送给该进程什么样的信号。一般的终止进程可以使用15信号；如果不能正常结束那就使用信号9强制结束该进程。默认值是信号15。在安全模式中此命令被屏蔽。 i 忽略闲置和僵死进程。这是一个开关式命令。 q 退出程序。 r 重新安排一个进程的优先级别。系统提示用户输入需要改变的进程PID以及需要设置的进程优先级值。输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权。默认值是10。 S 切换到累计模式。 s 改变两次刷新之间的延迟时间。系统将提示用户输入新的时间，单位为s。如果有小数，就换算成ms。输入0值则系统将不断刷新，默认值是5s。需要注意的是如果设置太小的时间，很可能会引起不断刷新，从而根本来不及看清显示的情况，而且系统负载也会大大增加。 f或者F 从当前显示中添加或者删除项目。 o或者O 改变显示项目的顺序。 l 切换显示平均负载和启动时间信息。 m 切换显示内存信息。 t 切换显示进程和CPU状态信息。 c 切换显示命令名称和完整命令行。 M 根据驻留内存大小进行排序。 P 根据CPU使用百分比大小进行排序。 T 根据时间/累计时间进行排序。 W 将当前设置写入~/.toprc文件中。这是写top配置文件的推荐方法。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Openstack命令行]]></title>
    <url>%2F2019%2F07%2F11%2FOpenstackTerminal%2F</url>
    <content type="text"><![CDATA[Keystone列出所有的用户123456789101112$ openstack user list+----------------------------------+-----------+| ID | Name |+----------------------------------+-----------+| 2ac5fe07105a43518ae444a37640222b | demo || 5bc73e84451b4e71906232bd3849422d | neutron || 84b0b75df69f4413a1380c9efc249b2d | placement || 87bf7fb4671f4524a6fa64ad75856594 | admin || 9aaa5aa26b414d35b37b851ccf749a55 | nova || eee2818e703e47c5a434e5926c90e7fb | glance |+----------------------------------+-----------+ 列出认证服务目录1234567891011121314151617181920212223242526272829303132333435363738394041$ openstack catalog list+-----------+-----------+-----------------------------------------+| Name | Type | Endpoints |+-----------+-----------+-----------------------------------------+| placement | placement | RegionOne || | | internal: http://controller:8778 || | | RegionOne || | | public: http://controller:8778 || | | RegionOne || | | admin: http://controller:8778 || | | || keystone | identity | RegionOne || | | internal: http://controller:5000/v3/ || | | RegionOne || | | public: http://controller:5000/v3/ || | | RegionOne || | | admin: http://controller:5000/v3/ || | | || neutron | network | RegionOne || | | public: http://controller:9696 || | | RegionOne || | | admin: http://controller:9696 || | | RegionOne || | | internal: http://controller:9696 || | | || glance | image | RegionOne || | | admin: http://controller:9292 || | | RegionOne || | | internal: http://controller:9292 || | | RegionOne || | | public: http://controller:9292 || | | || nova | compute | RegionOne || | | internal: http://controller:8774/v2.1 || | | RegionOne || | | admin: http://controller:8774/v2.1 || | | RegionOne || | | public: http://controller:8774/v2.1 || | | |+-----------+-----------+-----------------------------------------+ Glance列出您可以访问的镜像123456789101112131415161718$ openstack image list+--------------------------------------+---------------------+--------+| ID | Name | Status |+--------------------------------------+---------------------+--------+| 70d455f6-1a00-48f5-9b21-5f8fca019014 | centos7-mini | active || 1a7e4d60-3c26-41bb-be0c-34c467b2d3c3 | pstunnel | active || b2464312-8acb-4ff9-ba20-75560e5577f4 | pstunnelA | active || 705c7007-8a28-49e8-8df7-61bbfbf41bbd | pstunnelB | active || ad02946e-9c1f-42f0-9a9e-235ae7012bc3 | router | active || ae8c618d-3c6e-449c-9d2a-3f08bf84cc5e | router22 | active || b54361d4-bc24-46cb-94b2-b1f672b01c2a | sw-f-in-centos7_ext | active || 3a1adf75-c82e-4540-91e0-2167cb921612 | sw-f-in-centos7_int | active || ebfc7c40-4ac3-42ab-96ae-65e3c17af194 | sw-z-in-centos7_ext | active || 7355a66c-3f05-4ed5-9088-540faf71ebf8 | sw-z-in-centos7_int | active || 3b19c8ad-6012-406a-9e7f-e66416deeb1e | testforimage | active || 436c5ab5-14e7-4eb8-95b9-e47d85e60e83 | win7 | active |+--------------------------------------+---------------------+--------+ 查看一个指定的镜像12345678910111213141516171819202122232425$ openstack image show [IMAGE-ID/IMAGE-Name]$ openstack image show 70d455f6-1a00-48f5-9b21-5f8fca019014+------------------+------------------------------------------------------+| Field | Value |+------------------+------------------------------------------------------+| checksum | f3ab346b3ca2b88d1347c24adf0b234b || container_format | bare || created_at | 2019-06-26T09:08:51Z || disk_format | qcow2 || file | /v2/images/70d455f6-1a00-48f5-9b21-5f8fca019014/file || id | 70d455f6-1a00-48f5-9b21-5f8fca019014 || min_disk | 0 || min_ram | 0 || name | centos7-mini || owner | 2e69bc10ab5f427bbbd6d40148d96309 || protected | False || schema | /v2/schemas/image || size | 3758882816 || status | active || tags | || updated_at | 2019-06-26T09:09:32Z || virtual_size | None || visibility | public |+------------------+------------------------------------------------------+ 上传QCOW2镜像123456789101112131415161718192021222324$ openstack image create "centos7-mini2" --file centos7-mini.qcow2 --disk-format qcow2 --container-format bare --public+------------------+------------------------------------------------------+| Field | Value |+------------------+------------------------------------------------------+| checksum | f3ab346b3ca2b88d1347c24adf0b234b || container_format | bare || created_at | 2019-07-11T07:56:51Z || disk_format | qcow2 || file | /v2/images/4072bdfb-f727-4e3f-a1f5-c3467b12a15e/file || id | 4072bdfb-f727-4e3f-a1f5-c3467b12a15e || min_disk | 0 || min_ram | 0 || name | centos7-mini2 || owner | 2e69bc10ab5f427bbbd6d40148d96309 || protected | False || schema | /v2/schemas/image || size | 3758882816 || status | active || tags | || updated_at | 2019-07-11T07:57:54Z || virtual_size | None || visibility | public |+------------------+------------------------------------------------------+ 删除指定的镜像123$ openstack image delete [IMAGE-ID/IMAGE-Name]$ openstack image delete 4072bdfb-f727-4e3f-a1f5-c3467b12a15e Nova列出实例1234567891011121314$ openstack server list+--------------------------------------+-------------------------+---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------+---------------------+| ID | Name | Status | Networks | Image | Flavor |+--------------------------------------+-------------------------+---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------+---------------------+| 2ec1ace1-ef83-4d30-837e-f7f2df344a6c | n-UDYIQCS6 | SHUTOFF | network_5261=192.168.1.3 | win7 | win7 || 88a7d91d-3c29-461e-8d07-a0d272697a61 | n-L9QGOHRE | SHUTOFF | network_12177=192.168.1.19 | win7 | win7 || 274543b3-7890-4446-a5d0-1c6acfb9e1f4 | vm_n-4ejn7bk2c9o@28 | ACTIVE | network_10888=192.168.1.18 | win7 | win7 || c2cb7d6c-4f3e-4f32-bbd5-19639d415481 | sw_n-pf6p66vh4f_ext@33 | SHUTOFF | network_10360=192.168.1.3; n-XH29F3CG-net=8.8.8.9; network_21065=192.168.1.6; network_16174=192.168.1.5 | sw-z-in-centos7_ext | sw-z-in-centos7_ext || 5e009b71-4a8b-478a-9f17-349153a26ad4 | n-UE0N48YS | SHUTOFF | network_11645=192.168.1.4; network_14835=192.168.1.13; network_20101=192.168.1.9; internal=20.0.0.23, 192.100.200.225; network_18377=192.168.1.3; network_8075=192.168.1.10 | pstunnel | pstunnel || 374aedbe-d7c3-4f89-a66d-020401a257dc | n-MF9XYLTQ_int | SHUTOFF | network_23143=192.168.1.7; network_14693=192.168.1.7; network_13651=192.168.1.11 | sw-z-in-centos7_int | sw-z-in-centos7_int || acd8efcb-9350-4e19-a105-a1bcfb529697 | rt_n-une1ph6cts@20 | SHUTOFF | Rnet_n-une1ph6cts_0=192.168.3.1; Rnet_n-une1ph6cts_1=192.168.2.1 | router | router || 1efe6a9a-d005-4b32-926f-bb94fb702a05 | vm_n-vp0eo8lm0c@20 | SHUTOFF | network_14083=192.168.1.10 | | |+--------------------------------------+-------------------------+---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------+---------------------+ 显示实例详细信息1234567891011121314151617181920212223242526272829303132333435$ openstack server show [SERVER-ID/SERVER-Name]$ openstack server show 2ec1ace1-ef83-4d30-837e-f7f2df344a6c+-------------------------------------+----------------------------------------------------------+| Field | Value |+-------------------------------------+----------------------------------------------------------+| OS-DCF:diskConfig | MANUAL || OS-EXT-AZ:availability_zone | nova || OS-EXT-SRV-ATTR:host | compute || OS-EXT-SRV-ATTR:hypervisor_hostname | compute || OS-EXT-SRV-ATTR:instance_name | instance-00000294 || OS-EXT-STS:power_state | Shutdown || OS-EXT-STS:task_state | None || OS-EXT-STS:vm_state | stopped || OS-SRV-USG:launched_at | 2019-07-11T06:30:19.000000 || OS-SRV-USG:terminated_at | None || accessIPv4 | || accessIPv6 | || addresses | network_5261=192.168.1.3 || config_drive | || created | 2019-07-11T06:30:12Z || flavor | win7 (fd8297ef-d7ac-4b4f-8c1e-1c90fcce488c) || hostId | 37f71a5ebb11ac3ed0f0496a313bb9246829f1da1839c8fd3dc4f98b || id | 2ec1ace1-ef83-4d30-837e-f7f2df344a6c || image | win7 (436c5ab5-14e7-4eb8-95b9-e47d85e60e83) || key_name | None || name | n-UDYIQCS6 || project_id | 2e69bc10ab5f427bbbd6d40148d96309 || properties | || security_groups | name='default' || status | SHUTOFF || updated | 2019-07-11T06:31:30Z || user_id | 87bf7fb4671f4524a6fa64ad75856594 || volumes_attached | |+-------------------------------------+----------------------------------------------------------+ Neutron列出所有网络12345678$ openstack network list+--------------------------------------+----------------------+--------------------------------------+| ID | Name | Subnets |+--------------------------------------+----------------------+--------------------------------------+| 01e6c390-1d5e-4140-9ea3-98754bd0c58f | network_29287 | 8ed09dee-0e16-4514-8821-9a8e1f77c43a || 030f303e-e3d3-46e1-a85a-5ea6cea4d3ba | n-69PSABRW-net | e2ea53d0-1b29-43d3-910b-3296d96d004f |+--------------------------------------+----------------------+--------------------------------------+ 查看网络12345678910111213141516171819202122232425262728293031323334$ openstack network show NETWORK-ID$ openstack network show 01e6c390-1d5e-4140-9ea3-98754bd0c58f+---------------------------+--------------------------------------+| Field | Value |+---------------------------+--------------------------------------+| admin_state_up | UP || availability_zone_hints | || availability_zones | nova || created_at | 2019-06-19T02:16:06Z || description | || dns_domain | None || id | 01e6c390-1d5e-4140-9ea3-98754bd0c58f || ipv4_address_scope | None || ipv6_address_scope | None || is_default | None || is_vlan_transparent | None || mtu | 1500 || name | network_29287 || port_security_enabled | True || project_id | 2e69bc10ab5f427bbbd6d40148d96309 || provider:network_type | vxlan || provider:physical_network | None || provider:segmentation_id | 29287 || qos_policy_id | None || revision_number | 3 || router:external | Internal || segments | None || shared | True || status | ACTIVE || subnets | 8ed09dee-0e16-4514-8821-9a8e1f77c43a || tags | || updated_at | 2019-06-19T02:16:07Z |+---------------------------+--------------------------------------+ 列出所有子网12345678$ openstack subnet list+--------------------------------------+-----------------------+--------------------------------------+------------------+| ID | Name | Network | Subnet |+--------------------------------------+-----------------------+--------------------------------------+------------------+| 00414731-ab21-4ee8-8bf2-86d960cc4339 | network_sub_18721 | 84d6ee39-77b3-4a0b-80f8-67922b63079a | 192.168.1.0/24 || 014cb2e2-bdbe-4849-aec7-5fe0581e3b67 | network_sub_20494 | 6eb235c5-798c-49de-8fd3-08aa64f9abaa | 192.168.1.0/24 |+--------------------------------------+-----------------------+--------------------------------------+------------------+ 查看子网12345678910111213141516171819202122232425262728$ openstack subnet show SUBNET-ID$ openstack subnet show 00414731-ab21-4ee8-8bf2-86d960cc4339+-------------------+--------------------------------------+| Field | Value |+-------------------+--------------------------------------+| allocation_pools | 192.168.1.2-192.168.1.254 || cidr | 192.168.1.0/24 || created_at | 2019-07-11T02:09:49Z || description | || dns_nameservers | || enable_dhcp | True || gateway_ip | 192.168.1.1 || host_routes | || id | 00414731-ab21-4ee8-8bf2-86d960cc4339 || ip_version | 4 || ipv6_address_mode | None || ipv6_ra_mode | None || name | network_sub_18721 || network_id | 84d6ee39-77b3-4a0b-80f8-67922b63079a || project_id | 2e69bc10ab5f427bbbd6d40148d96309 || revision_number | 0 || segment_id | None || service_types | || subnetpool_id | None || tags | || updated_at | 2019-07-11T02:09:49Z |+-------------------+--------------------------------------+ 列出所有port12345678$ openstack port list+--------------------------------------+------+-------------------+--------------------------------------------------------------------------------+--------+| ID | Name | MAC Address | Fixed IP Addresses | Status |+--------------------------------------+------+-------------------+--------------------------------------------------------------------------------+--------+| 01f86921-016b-4df8-b526-ec81418b5df5 | | fa:16:3e:b9:c8:a8 | ip_address='20.0.0.2', subnet_id='c00a64e4-8921-427c-aa71-74f7a2c55954' | ACTIVE || 0280ba23-7a51-483c-a7a4-2351f277f739 | | fa:16:3e:ab:63:69 | ip_address='192.168.2.1', subnet_id='c4b84a4b-ce15-49e8-ae6b-72566224682c' | DOWN |+--------------------------------------+------+-------------------+--------------------------------------------------------------------------------+--------+ 查看port12345678910111213141516171819202122232425262728293031323334353637383940$ openstack port show PORT-ID$ openstack port show 01f86921-016b-4df8-b526-ec81418b5df5+-----------------------+-------------------------------------------------------------------------------+| Field | Value |+-----------------------+-------------------------------------------------------------------------------+| admin_state_up | UP || allowed_address_pairs | || binding_host_id | controller || binding_profile | || binding_vif_details | datapath_type='system', ovs_hybrid_plug='True', port_filter='True' || binding_vif_type | ovs || binding_vnic_type | normal || created_at | 2019-06-19T01:41:33Z || data_plane_status | None || description | || device_id | dhcpd3377d3c-a0d1-5d71-9947-f17125c357bb-361f196b-154a-4e51-bc34-7162d043be1b || device_owner | network:dhcp || dns_assignment | None || dns_name | None || extra_dhcp_opts | || fixed_ips | ip_address='20.0.0.2', subnet_id='c00a64e4-8921-427c-aa71-74f7a2c55954' || id | 01f86921-016b-4df8-b526-ec81418b5df5 || ip_address | None || mac_address | fa:16:3e:b9:c8:a8 || name | || network_id | 361f196b-154a-4e51-bc34-7162d043be1b || option_name | None || option_value | None || port_security_enabled | False || project_id | 2e69bc10ab5f427bbbd6d40148d96309 || qos_policy_id | None || revision_number | 6 || security_group_ids | || status | ACTIVE || subnet_id | None || tags | || trunk_details | None || updated_at | 2019-06-19T01:41:35Z |+-----------------------+-------------------------------------------------------------------------------+ 摘自：Openstack官方文档 https://docs.openstack.org/zh_CN/user-guide/cli-cheat-sheet.html]]></content>
      <categories>
        <category>Openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Openstack修改系统网络配额]]></title>
    <url>%2F2019%2F07%2F11%2FOpenstackNeutronQuotas%2F</url>
    <content type="text"><![CDATA[前言neutron在安装配置完成之后，openstack为了实现对所有tenant对网络资源的使用，针对neutron设置有专门的配额，以防止租户使用过多的资源，而对其他的tenant造成影响。和nova的quota相类似，neutron也使用单独的一个驱动来实现网络neutron的配额控制。 neutron默认的配额neutron默认的配额针对network，port，router，subnet，floatingip做了配额方面的限定，参考neutron的配置文件，获取quota的配额内容为: 12345678910111213141516[root@controller ~]# vim /etc/neutron/neutron.conf[quotas]quota_driver = neutron.db.quota_db.DbQuotaDriver 配额驱动quota_items = network,subnet,port quota限定的范畴default_quota = -1 默认的quota，-1表示没有限制(未启用)quota_network = 10 建立的network个数quota_subnet = 10 建立的subnet个数quota_port = 50 允许的port个数quota_security_group = 10 安全组的个数quota_security_group_rule = 100 安全组规规则条数quota_vip = 10 vip个数，以下的quota_member和quota_health_monitors 都用于LBaaS场景quota_pool = 10 pool个数quota_member = -1 member个数quota_health_monitors = -1 monitor个数quota_router = 10 router的个数quota_floatingip = 50 floating-ip个数 修改neutron的配额查看neutron默认的配额 123456789[root@controller ~]# keystone tenant-list+----------------------------------+----------+---------+| id | name | enabled |+----------------------------------+----------+---------+| 842ab3268a2c47e6a4b0d8774de805ae | admin | True || 7ff1dfb5a6f349958c3a949248e56236 | companyA | True | #得到tenant的uuid号| 10d1465c00d049fab88dec1af0f56b1b | demo | True || 3b57a14f7c354a979c9f62b60f31a331 | service | True |+----------------------------------+----------+---------+ 12345678910111213141516[root@controller ~]# neutron quota-show --tenant-id 7ff1dfb5a6f349958c3a949248e56236+---------------------+-------+| Field | Value |+---------------------+-------+| floatingip | 50 || health_monitor | -1 || member | -1 || network | 10 || pool | 10 || port | 50 | #port，每台虚拟机都需要一个ip，即一个port，很容易就超过配额| router | 10 || security_group | 10 || security_group_rule | 100 || subnet | 10 || vip | 10 |+---------------------+-------+ 修改neutron配额 12345678910111213141516[root@controller ~]# neutron quota-update --network 20 --subnet 20 --port 100 --router 5 --floatingip 100 --security-group 10 --security-group-rule 100 --tenant-id 7ff1dfb5a6f349958c3a949248e56236+---------------------+-------+| Field | Value |+---------------------+-------+| floatingip | 100 || health_monitor | -1 || member | -1 || network | 20 || pool | 10 || port | 100 || router | 5 || security_group | 10 || security_group_rule | 100 || subnet | 20 || vip | 10 |+---------------------+-------+ 校验neutron的quota配置 12345678910111213141516[root@controller ~]# neutron quota-show --tenant-id 7ff1dfb5a6f349958c3a949248e56236+---------------------+-------+| Field | Value |+---------------------+-------+| floatingip | 100 || health_monitor | -1 || member | -1 || network | 20 || pool | 10 || port | 100 || router | 5 || security_group | 10 || security_group_rule | 100 || subnet | 20 || vip | 10 |+---------------------+-------+ 统计port的个数1234567891011[root@controller ~]# neutron port-list+--------------------------------------+------+-------------------+---------------------------------------------------------------------------------------+| id | name | mac_address | fixed_ips |+--------------------------------------+------+-------------------+---------------------------------------------------------------------------------------+| 0060ec4a-957d-4571-b730-6b4a9bb3baf8 | | fa:16:3e:48:42:3d | &#123;"subnet_id": "9654a807-d4fa-49f1-abb6-2e45d776c69f", "ip_address": "10.16.4.19"&#125; || 00942be0-a3a9-471d-a4ba-336db0ee1539 | | fa:16:3e:73:75:03 | &#123;"subnet_id": "ad4a5ffc-3ccc-42c4-89a1-61e7b18632a3", "ip_address": "10.16.6.96"&#125; || 0119045c-8219-4744-bd58-a7e77294832c | | fa:16:3e:10:ed:7f | &#123;"subnet_id": "9654a807-d4fa-49f1-abb6-2e45d776c69f", "ip_address": "10.16.4.71"&#125; || 04f7d8ea-1849-4938-9ef7-e8114893132f | | fa:16:3e:50:86:1b | &#123;"subnet_id": "ad4a5ffc-3ccc-42c4-89a1-61e7b18632a3", "ip_address": "10.16.6.27"&#125; |[root@controller ~]# neutron port-list |wc -l #超过配额时，需要修改194 总结随着时间的推移，当越来越多的instance加入到openstack中，port也会相应增加，一个ip对应一个port，所以当port达到配额时，openstack会组织用户继续分配虚拟机，此时，就需要修改neutron的配额了，关于neutron配额的报错，可以参考neutron的日志/var/log/neutron/neutron-server.log，可以根据日志的信息，定位到报错的原因，具体不赘述。 附录neutron实现quota的代码解读 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197[root@controller ~]# vim /usr/lib/python2.6/site-packages/neutron/db/quota_db.pyimport sqlalchemy as safrom neutron.common import exceptionsfrom neutron.db import model_basefrom neutron.db import models_v2'''quota数据库表的表结构，tenant默认集成的配额从这里获取mysql&gt; desc quotas;+-----------+--------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-----------+--------------+------+-----+---------+-------+| id | varchar(36) | NO | PRI | NULL | || tenant_id | varchar(255) | YES | MUL | NULL | || resource | varchar(255) | YES | | NULL | || limit | int(11) | YES | | NULL | |+-----------+--------------+------+-----+---------+-------+'''class Quota(model_base.BASEV2, models_v2.HasId): """Represent a single quota override for a tenant. If there is no row for a given tenant id and resource, then the default for the quota class is used. """ tenant_id = sa.Column(sa.String(255), index=True) resource = sa.Column(sa.String(255)) limit = sa.Column(sa.Integer)'''quota配额的具体实现，根据数据库的配置内容，实现quota的控制，即quota的增删改查方法'''class DbQuotaDriver(object): """Driver to perform necessary checks to enforce quotas and obtain quota information. The default driver utilizes the local database. """ ''' 得到租户tenant的quota，执行neutron quota-show --tenant-id uuid时调用的方法 ''' @staticmethod def get_tenant_quotas(context, resources, tenant_id): """Given a list of resources, retrieve the quotas for the given tenant. :param context: The request context, for access checks. :param resources: A dictionary of the registered resource keys. :param tenant_id: The ID of the tenant to return quotas for. :return dict: from resource name to dict of name and limit """ # init with defaults 得到quota默认的配额项item，即所谓的network，subnet，port和router等，以及对应的值 tenant_quota = dict((key, resource.default) for key, resource in resources.items()) # update with tenant specific limits 从数据库中获取最新的quota配置信息，并更新 q_qry = context.session.query(Quota).filter_by(tenant_id=tenant_id) tenant_quota.update((q['resource'], q['limit']) for q in q_qry) return tenant_quota ''' quota的删除，即执行neutron quota-delete 的方法，删除之后，tenant将会集成默认的的quota配置 ''' @staticmethod def delete_tenant_quota(context, tenant_id): """Delete the quota entries for a given tenant_id. Atfer deletion, this tenant will use default quota values in conf. """ #从neutron。quotas数据库中查询到所有的quota配置之后，过略某个具体的tenant的quota，之后执行delete()方法将其删除 with context.session.begin(): tenant_quotas = context.session.query(Quota) tenant_quotas = tenant_quotas.filter_by(tenant_id=tenant_id) tenant_quotas.delete() ''' 得到所有租户tenant的配额资源，即执行neutron quota-list所查看的内容 ''' @staticmethod def get_all_quotas(context, resources): """Given a list of resources, retrieve the quotas for the all tenants. :param context: The request context, for access checks. :param resources: A dictionary of the registered resource keys. :return quotas: list of dict of tenant_id:, resourcekey1: resourcekey2: ... """ tenant_default = dict((key, resource.default) for key, resource in resources.items()) all_tenant_quotas = &#123;&#125; for quota in context.session.query(Quota): tenant_id = quota['tenant_id'] # avoid setdefault() because only want to copy when actually req'd #如果quotas表中，没有找到配置选项，说明使用默认的quota配置，直接用默认的copy过来即可，有配置则继承quotas表中的配置 tenant_quota = all_tenant_quotas.get(tenant_id) if tenant_quota is None: tenant_quota = tenant_default.copy() tenant_quota['tenant_id'] = tenant_id all_tenant_quotas[tenant_id] = tenant_quota tenant_quota[quota['resource']] = quota['limit'] return all_tenant_quotas.values() ''' 更新quota的配置，即执行neutron quota-update命令的具体实现 ''' @staticmethod def update_quota_limit(context, tenant_id, resource, limit): with context.session.begin(): tenant_quota = context.session.query(Quota).filter_by( tenant_id=tenant_id, resource=resource).first() #有配置内容，则更新，没有则根据资源的配置内容，在数据库中添加对应的条目 if tenant_quota: tenant_quota.update(&#123;'limit': limit&#125;) else: tenant_quota = Quota(tenant_id=tenant_id, resource=resource, limit=limit) context.session.add(tenant_quota) def _get_quotas(self, context, tenant_id, resources, keys): """Retrieves the quotas for specific resources. A helper method which retrieves the quotas for the specific resources identified by keys, and which apply to the current context. :param context: The request context, for access checks. :param tenant_id: the tenant_id to check quota. :param resources: A dictionary of the registered resources. :param keys: A list of the desired quotas to retrieve. """ desired = set(keys) sub_resources = dict((k, v) for k, v in resources.items() if k in desired) # Make sure we accounted for all of them... if len(keys) != len(sub_resources): unknown = desired - set(sub_resources.keys()) raise exceptions.QuotaResourceUnknown(unknown=sorted(unknown)) # Grab and return the quotas (without usages) quotas = DbQuotaDriver.get_tenant_quotas( context, sub_resources, tenant_id) return dict((k, v) for k, v in quotas.items()) ''' neutron quota的校验，即在执行过程中，调用该方法，确认tenant的quota是否在合理的范围内 ''' def limit_check(self, context, tenant_id, resources, values): """Check simple quota limits. For limits--those quotas for which there is no usage synchronization function--this method checks that a set of proposed values are permitted by the limit restriction. This method will raise a QuotaResourceUnknown exception if a given resource is unknown or if it is not a simple limit resource. If any of the proposed values is over the defined quota, an OverQuota exception will be raised with the sorted list of the resources which are too high. Otherwise, the method returns nothing. :param context: The request context, for access checks. :param tenant_id: The tenant_id to check the quota. :param resources: A dictionary of the registered resources. :param values: A dictionary of the values to check against the quota. """ # Ensure no value is less than zero quota的配置值不能为负数 unders = [key for key, val in values.items() if val &lt; 0] if unders: raise exceptions.InvalidQuotaValue(unders=sorted(unders)) # Get the applicable quotas quotas = self._get_quotas(context, tenant_id, resources, values.keys()) # Check the quotas and construct a list of the resources that # would be put over limit by the desired values overs = [key for key, val in values.items() if quotas[key] &gt;= 0 and quotas[key] &lt; val] if overs: raise exceptions.OverQuota(overs=sorted(overs)) 摘自：https://segmentfault.com/a/1190000018750816]]></content>
      <categories>
        <category>Openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL中InnoDB和MyISAM的存储引擎区别]]></title>
    <url>%2F2019%2F07%2F10%2FMysqlEngine%2F</url>
    <content type="text"><![CDATA[InnoDB存储引擎：InnoDB存储引擎支持事务，其设计目标主要就是面向OLTP（On Line Transaction Processing 在线事务处理）的应用。特点为行锁设计、支持外键，并支持非锁定读。从5.5.8版本开始，InnoDB成为了MySQL的默认存储引擎。 InnoDB存储引擎采用聚集索引（clustered）的方式来存储数据，因此每个表都是按照主键的顺序进行存放，如果没有指定主键，InnoDB会为每行自动生成一个6字节的ROWID作为主键。 MyISAM存储引擎：MyISAM存储引擎不支持事务、表锁设计，支持全文索引，主要面向OLAP（On Line Analytical Processing 联机分析处理）应用，适用于数据仓库等查询频繁的场景。在5.5.8版本之前，MyISAM是MySQL的默认存储引擎。该引擎代表着对海量数据进行查询和分析的需求。它强调性能，因此在查询的执行速度比InnoDB更快。 MyISAM存储引擎还有一个特点是只缓存索引文件，而不缓存数据文件，这点非常独特。 InnoDB和MyISAM的区别:事务为了数据库操作的原子性，我们需要事务。保证一组操作要么都成功，要么都失败，比如转账的功能。我们通常将多条SQL语句放在begin和commit之间，组成一个事务。 InnoDB支持，MyISAM不支持。 主键由于InnoDB的聚集索引，其如果没有指定主键，就会自动生成主键。MyISAM支持没有主键的表存在。 外键为了解决复杂逻辑的依赖，我们需要外键。比如高考成绩的录入，必须归属于某位同学，我们就需要高考成绩数据库里有准考证号的外键。 InnoDB支持，MyISAM不支持。 索引为了优化查询的速度，进行排序和匹配查找，我们需要索引。比如所有人的姓名从a-z首字母进行顺序存储，当我们查找zhangsan或者第44位的时候就可以很快的定位到我们想要的位置进行查找。 InnoDB是聚集索引，数据和主键的聚集索引绑定在一起，通过主键索引效率很高。如果通过其他列的辅助索引来进行查找，需要先查找到聚集索引，再查询到所有数据，需要两次查询。 MyISAM是非聚集索引，数据文件是分离的，索引保存的是数据的指针。 从InnoDB 1.2.x版本，MySQL5.6版本后，两者都支持全文索引。 auto_increment对于自增数的字段，InnoDB要求必须有只有该字段的索引。但MyISAM可以将该字段与其他字段组成联合索引。 表行数很常见的需求是看表中有多少条数据，此时我们需要 1select count(*) from table_name; InnoDB不保存表行数，需要进行全表扫描。MyISAM用一个变量保存，直接读取该值，更快。当时当带有where查询的时候，两者一样。 存储数据库的文件都是需要在磁盘中进行存储，当应用需要时再读取到内存中。一般包含数据文件、索引文件。 InnoDB分为：.frm表结构文件.ibdata1共享表空间.ibd表独占空间.redo日志文件 MyISAM分为三个文件：.frm存储表定义.MYD存储表数据.MYI存储表索引 执行速度如果你的操作是大量的查询操作，如SELECT，使用MyISAM性能会更好。如果大部分是删除和更改的操作，使用InnoDB。 delete调用delete from table时，MyISAM会直接重建表，InnoDB会一行一行的删除，但是可以用truncate table代替。 锁MyISAM仅支持表锁，每次操作锁定整张表。InnoDB支持行锁，每次操作锁住最小数量的行数据。 表锁相比于行锁消耗的资源更少，且不会出现死锁，但同时并发性能差。行锁消耗更多的资源，速度较慢，且可能发生死锁，但是因为锁定的粒度小、数据少，并发性能好。如果InnoDB的一条语句无法确定要扫描的范围，也会锁定整张表。 当行锁发生死锁的时候，会计算每个事务影响的行数，然后回滚行数较少的事务。 数据恢复MyISAM崩溃后无法快速的安全恢复。InnoDB有一套完善的恢复机制。 数据缓存MyISAM仅缓存索引数据，通过索引查询数据。InnoDB不仅缓存索引数据，同时缓存数据信息，将数据按页读取到缓存池，按LRU（Latest Rare Use 最近最少使用）算法来进行更新。 如何选择存储引擎创建表的语句都是相同的，只有最后的type来指定存储引擎。 MyISAM1.大量查询总count2.查询频繁，插入不频繁3.没有事务操作 InnoDB1.需要高可用性，或者需要事务2.表更新频繁 摘自：https://segmentfault.com/a/1190000019713794]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql 1040 Too many connections 错误与解决办法]]></title>
    <url>%2F2019%2F07%2F01%2FTooManyConnections%2F</url>
    <content type="text"><![CDATA[日志报如下错误: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364Traceback (most recent call last): File "/var/www/kdpa/project/api/host.py", line 339, in showInstanceConsole File "/var/www/kdpa/project/api/hostImpl.py", line 500, in showInstanceConsoleImpl opsVmId = self.hostDao.getOpsVmIdByUuid(uuid) File "/var/www/kdpa/project/core/modifier.py", line 46, in _dao return daoFn(*args, **kwargs) File "/var/www/kdpa/project/dao/host/hostDao.py", line 168, in getOpsVmIdByUuid host = session.query(Host).filter(Host.uuid == str(uuid)).first() File "/usr/lib64/python2.7/site-packages/sqlalchemy/orm/query.py", line 3222, in first ret = list(self[0:1]) File "/usr/lib64/python2.7/site-packages/sqlalchemy/orm/query.py", line 3012, in __getitem__ return list(res) File "/usr/lib64/python2.7/site-packages/sqlalchemy/orm/query.py", line 3324, in __iter__ return self._execute_and_instances(context) File "/usr/lib64/python2.7/site-packages/sqlalchemy/orm/query.py", line 3346, in _execute_and_instances querycontext, self._connection_from_session, close_with_result=True File "/usr/lib64/python2.7/site-packages/sqlalchemy/orm/query.py", line 3361, in _get_bind_args mapper=self._bind_mapper(), clause=querycontext.statement, **kw File "/usr/lib64/python2.7/site-packages/sqlalchemy/orm/query.py", line 3339, in _connection_from_session conn = self.session.connection(**kw) File "/usr/lib64/python2.7/site-packages/sqlalchemy/orm/session.py", line 1124, in connection execution_options=execution_options, File "/usr/lib64/python2.7/site-packages/sqlalchemy/orm/session.py", line 1130, in _connection_for_bind engine, execution_options File "/usr/lib64/python2.7/site-packages/sqlalchemy/orm/session.py", line 431, in _connection_for_bind conn = bind._contextual_connect() File "/usr/lib64/python2.7/site-packages/sqlalchemy/engine/base.py", line 2226, in _contextual_connect self._wrap_pool_connect(self.pool.connect, None), File "/usr/lib64/python2.7/site-packages/sqlalchemy/engine/base.py", line 2266, in _wrap_pool_connect e, dialect, self File "/usr/lib64/python2.7/site-packages/sqlalchemy/engine/base.py", line 1536, in _handle_dbapi_exception_noconnection util.raise_from_cause(sqlalchemy_exception, exc_info) File "/usr/lib64/python2.7/site-packages/sqlalchemy/util/compat.py", line 399, in raise_from_cause reraise(type(exception), exception, tb=exc_tb, cause=cause) File "/usr/lib64/python2.7/site-packages/sqlalchemy/engine/base.py", line 2262, in _wrap_pool_connect return fn() File "/usr/lib64/python2.7/site-packages/sqlalchemy/pool/base.py", line 363, in connect return _ConnectionFairy._checkout(self) File "/usr/lib64/python2.7/site-packages/sqlalchemy/pool/base.py", line 760, in _checkout fairy = _ConnectionRecord.checkout(pool) File "/usr/lib64/python2.7/site-packages/sqlalchemy/pool/base.py", line 492, in checkout rec = pool._do_get() File "/usr/lib64/python2.7/site-packages/sqlalchemy/pool/impl.py", line 139, in _do_get self._dec_overflow() File "/usr/lib64/python2.7/site-packages/sqlalchemy/util/langhelpers.py", line 68, in __exit__ compat.reraise(exc_type, exc_value, exc_tb) File "/usr/lib64/python2.7/site-packages/sqlalchemy/pool/impl.py", line 136, in _do_get return self._create_connection() File "/usr/lib64/python2.7/site-packages/sqlalchemy/pool/base.py", line 308, in _create_connection return _ConnectionRecord(self) File "/usr/lib64/python2.7/site-packages/sqlalchemy/pool/base.py", line 437, in __init__ self.__connect(first_connect_check=True) File "/usr/lib64/python2.7/site-packages/sqlalchemy/pool/base.py", line 639, in __connect connection = pool._invoke_creator(self) File "/usr/lib64/python2.7/site-packages/sqlalchemy/engine/strategies.py", line 114, in connect return dialect.connect(*cargs, **cparams) File "/usr/lib64/python2.7/site-packages/sqlalchemy/engine/default.py", line 451, in connect return self.dbapi.connect(*cargs, **cparams) File "build/bdist.linux-x86_64/egg/MySQLdb/__init__.py", line 81, in Connect return Connection(*args, **kwargs) File "build/bdist.linux-x86_64/egg/MySQLdb/connections.py", line 187, in __init__ super(Connection, self).__init__(*args, **kwargs2)OperationalError: (_mysql_exceptions.OperationalError) (1040, 'Too many connections')(Background on this error at: http://sqlalche.me/e/e3q8) 解决方式： 查看当前数据库最大连接数： 1234567MariaDB [(none)]&gt; select VARIABLE_VALUE from information_schema.GLOBAL_VARIABLES where VARIABLE_NAME='MAX_CONNECTIONS';+----------------+| VARIABLE_VALUE |+----------------+| 214 |+----------------+1 row in set (0.00 sec) 12345vi /etc/systemd/system/mariadb.service.d/limits.conf[Service]LimitNOFILE=65535LimitNPROC=65535 保存，退出。 12systemctl daemon-reloadsystemctl restart mariadb.service 重启后查看： 1234567MariaDB [(none)]&gt; select VARIABLE_VALUE from information_schema.GLOBAL_VARIABLES where VARIABLE_NAME='MAX_CONNECTIONS';+----------------+| VARIABLE_VALUE |+----------------+| 4096 |+----------------+1 row in set (0.00 sec) 4096配置在Openstack的mysql配置 /etc/my.cnf.d/openstack.cnf中max_connections = 4096。]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[压力测试工具ab使用方法]]></title>
    <url>%2F2019%2F06%2F28%2Fab%2F</url>
    <content type="text"><![CDATA[安装在CentOS7-mini环境下，ab运行需要依赖apr-util，httpd-tools包，安装命令为： 1yum install apr-util httpd-tools -y 执行测试12#vi post.txtuuid=n-vp0eo8lm0c&amp; 1ab -c 10 -n 10 -p 'post.txt' -T 'application/x-www-form-urlencoded' http://192.100.200.140:8000/api/instance/show 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking 192.100.200.140 (be patient).....doneServer Software: nginx/1.9.9Server Hostname: 192.100.200.140Server Port: 8000Document Path: /api/instance/showDocument Length: 23 bytesConcurrency Level: 10Time taken for tests: 1.378 secondsComplete requests: 10Failed requests: 6 (Connect: 0, Receive: 0, Length: 6, Exceptions: 0)Write errors: 0Non-2xx responses: 3Total transferred: 3398 bytesTotal body sent: 1940HTML transferred: 1787 bytesRequests per second: 7.26 [#/sec] (mean)Time per request: 1377.853 [ms] (mean)Time per request: 137.785 [ms] (mean, across all concurrent requests)Transfer rate: 2.41 [Kbytes/sec] received 1.37 kb/s sent 3.78 kb/s totalConnection Times (ms) min mean[+/-sd] median maxConnect: 0 0 0.1 0 1Processing: 68 543 548.0 246 1256Waiting: 68 543 548.0 246 1256Total: 69 544 548.0 247 1257Percentage of the requests served within a certain time (ms) 50% 247 66% 1095 75% 1157 80% 1196 90% 1257 95% 1257 98% 1257 99% 1257 100% 1257 (longest request) 参数说明：-n 10 表示请求总数为10 -c 10 表示并发用户数为10 http://192.100.200.140:8000/api/instance/show 表示这写请求的目标URL 测试结果也一目了然，测试出的吞吐率为：Requests per second: 2015.93 [#/sec] (mean) 初次之外还有其他一些信息。 Server Software 表示被测试的Web服务器软件名称 Server Hostname 表示请求的URL主机名 Server Port 表示被测试的Web服务器软件的监听端口 Document Path 表示请求的URL中的根绝对路径，通过该文件的后缀名，我们一般可以了解该请求的类型 Document Length 表示HTTP响应数据的正文长度 Concurrency Level 表示并发用户数，这是我们设置的参数之一 Time taken for tests 表示所有这些请求被处理完成所花费的总时间 Complete requests 表示总请求数量，这是我们设置的参数之一 Failed requests 表示失败的请求数量，这里的失败是指请求在连接服务器、发送数据等环节发生异常，以及无响应后超时的情况。如果接收到的HTTP响应数据的头信息中含有2XX以外的状态码，则会在测试结果中显示另一个名为 “Non-2xx responses”的统计项，用于统计这部分请求数，这些请求并不算在失败的请求中。 Total transferred 表示所有请求的响应数据长度总和，包括每个HTTP响应数据的头信息和正文数据的长度。注意这里不包括HTTP请求数据的长度，仅仅为web服务器流向用户PC的应用层数据总长度。 HTML transferred 表示所有请求的响应数据中正文数据的总和，也就是减去了Total transferred中HTTP响应数据中的头信息的长度。 Requests per second 吞吐率，计算公式：Complete requests / Time taken for tests Time per request 用户平均请求等待时间，计算公式：Time token for tests/（Complete requests/Concurrency Level） Time per requet(across all concurrent request) 服务器平均请求等待时间，计算公式：Time taken for tests/Complete requests，正好是吞吐率的倒数。也可以这么统计：Time per request/Concurrency Level Transfer rate 表示这些请求在单位时间内从服务器获取的数据长度，计算公式：Total trnasferred/ Time taken for tests，这个统计很好的说明服务器的处理能力达到极限时，其出口宽带的需求量。 Percentage of requests served within a certain time（ms） 这部分数据用于描述每个请求处理时间的分布情况，比如以上测试，80%的请求处理时间都不超过6ms，这个处理时间是指前面的Time per request，即对于单个用户而言，平均每个请求的处理时间。]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实验室虚拟化主站厂站拓扑搭建]]></title>
    <url>%2F2019%2F06%2F25%2FkdpaTopo%2F</url>
    <content type="text"><![CDATA[虚拟化正向隔离①创建虚拟化正向隔离组件 SW_1，开机②创建虚拟交换机 Switch_2，开机③创建虚拟交换机 Switch_3，开机④创建虚拟主机[win7-2-ok]-主站PC PC_4，开机⑤创建虚拟主机[win7-2-ok]-安全三区PC PC_5，开机⑥创建虚拟主机[win7-2-ok]-隔离SW_1管理工具 PC_6，开机⑦配置PC_4IP地址：192.168.1.10 255.255.255.0 192.168.1.1⑧配置PC_5IP地址：192.168.1.20 255.255.255.0 192.168.1.1⑨配置Switch_2：1-4口配置VLAN1001⑩配置Switch_3：1-4口配置VLAN1002⑪创建串口线，连接SW_1串口（内）与PC_6⑫创建网线，连接SW_1网卡0（内）与Switch_2网口1⑬创建网线，连接SW_1网卡0（外）与Switch_3网口1⑭创建网线，连接PC_4网卡0与Switch_2网口2⑮创建网线，连接PC_5网卡0与Switch_3网口2⑯配置正向隔离管理工具PC_6：配置管理工具。 PC_6右键 -&gt; 上传/下载 -&gt; 传入vc_redist.2015.x64与全QT界面隔离管理工具中包含vcruntime140.dll，libcrypto-1_1.dll。 -&gt; 关闭 安装vc_redist.2015.x64 打开全QT界面隔离管理工具Stonewall.exe 屏幕分辨率 -&gt; 1024×768 用户名：admin 密码：111111 串口登录。 串口：COM1。 频率：115200。 权限：管理员。 √ 正向隔离。 设备配置 -&gt; 基本配置 管理IP： 无 -&gt; 不填 设备名称： zsw -&gt; 自定义 点击写入 规则配置 -&gt; 主机信息1 -&gt; 添加 SW_1 -&gt; 进入内网隔离系统 -&gt; 清除主机信息与连接信息 -&gt; 删除/etc/mac.conf 和 /etc/rules √ IP和MAC地址绑定 主机名： PC_4 -&gt; 自定义 MAC1： FA:16:3E:40:11:01 -&gt; 主机网卡MAC地址 主机IP： 192.168.1.10 -&gt; 主机网卡ip地址 主机虚拟IP1：192.168.1.11 -&gt; ETH0协商IP与主机同网段时自动生成,不通网段时填写一个ETH0所在网段下任意IP地址 主机虚拟ip2：可以不填 规则配置 -&gt; 主机信息2 -&gt; 添加 √ IP和MAC地址绑定 主机名： PC_5 -&gt; 自定义 MAC1： FA:16:3E:40:11:02 -&gt; 主机网卡MAC地址 主机IP： 192.168.1.20 -&gt; 主机网卡ip地址 主机虚拟IP1：192.168.1.21 -&gt; ETH0协商IP与主机同网段时自动生成,不通网段时填写一个ETH0所在网段下任意IP地址 主机虚拟ip2：可以不填 规则配置 -&gt; 连接信息 规则名： rule -&gt; 自定义 (内网)IP地址： 192.100.1.10 (内网)虚拟IP： 192.100.1.11 (内网)网口号： ETH0/网口0 (外网)IP地址： 192.100.1.20 (外网)虚拟IP： 192.100.1.21 (外网)网口号： ETH0/网口0 协议： TCP ⑰配置后查看SW_1 /etc/mac.conf和/etc/rules是否与配置相同。重启SW_1内网隔离与外网隔离。 正向隔离： 发送端为内网 接收端为外网 sender：PC_4 receiver：PC_5 ⑱配置及启动正向隔离外网接收端工具。 PC_5 -&gt; 进入系统 -&gt; 右键 -&gt; Terminal -&gt; 以管理员身份运行 -&gt; 进入目录 -&gt; D:\software\隔离传输软件\正向\receive 以jar包方式运行 java -jar StoneWall-recv.jar ⑲配置及启动正向隔离内网发送端工具。 PC_4 -&gt; 进入系统 -&gt; 右键 -&gt; Terminal -&gt; 以管理员身份运行 -&gt; 进入目录 -&gt; D:\software\隔离传输软件\send 以jar包方式运行 java -jar StoneWall-send.jar 待发送的文件（任何类型）-&gt; 右键 -&gt; 发送 任务名称： task √ 主任务 目的IP地址： 192.168.1.21 -&gt; 接收端虚拟IP地址 目的端口号： 7777 目的文件夹： d:/test -&gt; 自定义 √ 立即发送 查看日志及接收端是否发送成功。 虚拟化反向隔离⑳创建虚拟化反向隔离组件 SW_2，开机㉑创建虚拟主机[win7-2-ok]-隔离SW_2管理工具 PC_7，开机㉒创建串口线，连接SW_2串口（外）与PC_7㉓创建网线，连接SW_2网卡0（内）与Switch_2网口3㉔创建网线，连接SW_2网卡0（外）与Switch_3网口3㉕⑯配置反向隔离管理工具PC_7：配置管理工具。 PC_7右键 -&gt; 上传/下载 -&gt; 传入vc_redist.2015.x64与全QT界面隔离管理工具中包含vcruntime140.dll，libcrypto-1_1.dll。 -&gt; 关闭 安装vc_redist.2015.x64 打开全QT界面隔离管理工具Stonewall.exe 屏幕分辨率 -&gt; 1024×768 用户名：admin 密码：111111 串口登录。 串口：COM1。 频率：115200。 权限：管理员。 √ 反向隔离。 设备配置 -&gt; 基本配置 管理IP： 无 -&gt; 不填 设备名称： fsw -&gt; 自定义 ETH0协商IP： 192.168.1.200 -&gt; 与发送端须配置成相同网段 ETH1协商IP： 0.0.0.0 -&gt; 可不做配置 规则配置 -&gt; 主机信息1 -&gt; 添加 SW_2 -&gt; 进入外网隔离系统 -&gt; 清除主机信息与连接信息 -&gt; 删除/etc/mac.conf 和 /etc/rules √ IP和MAC地址绑定 主机名： PC_5 -&gt; 自定义 MAC1： FA:16:3E:40:11:02 -&gt; 主机网卡MAC地址 主机IP： 192.168.1.20 -&gt; 主机网卡ip地址 主机虚拟IP1：192.168.1.22 -&gt; ETH0协商IP与主机同网段时自动生成,不通网段时填写一个ETH0所在网段下任意IP地址 主机虚拟ip2：可以不填 规则配置 -&gt; 主机信息2 -&gt; 添加 √ IP和MAC地址绑定 主机名： PC_4 -&gt; 自定义 MAC1： FA:16:3E:40:11:01 -&gt; 主机网卡MAC地址 主机IP： 192.168.1.10 -&gt; 主机网卡ip地址 主机虚拟IP1：192.168.1.12 -&gt; ETH0协商IP与主机同网段时自动生成,不通网段时填写一个ETH0所在网段下任意IP地址 主机虚拟ip2：可以不填 规则配置 -&gt; 连接信息 规则名： rule -&gt; 自定义 (内网)IP地址： 192.100.1.10 (内网)虚拟IP： 192.100.1.12 (内网)网口号： ETH0/网口0 (外网)IP地址： 192.100.1.20 (外网)虚拟IP： 192.100.1.22 (外网)网口号： ETH0/网口0 协议： UDP 证书秘钥 -&gt; 设备秘钥 设备密钥 √ RSA -&gt; 导出设备证书文件 -&gt; fsw.cer 上传/下载 -&gt; fsw.cer导出到本地 ㉖配置及启动反向隔离内网接收端工具。 上传/下载 -&gt; 新的隔离接收端工具new_udp_recv_4.2.2.jar -&gt; 复制到目录D:\software\隔离传输软件\反向\receive\下 右键 -&gt; Terminal -&gt; 以管理员身份运行 -&gt; 进入目录 -&gt; D:\software\隔离传输软件\反向\receive 以jar包方式运行 java -jar new_udp_recv_4.2.2.jar ㉗配置及启动反向隔离外网发送端工具。 上传/下载 -&gt; 新的隔离接收端工具new_udp_send_4.2.2.jar -&gt; 复制到目录D:\software\隔离传输软件\反向\send\下 上传/下载 -&gt; 反向隔离端证书 fsw.cer 检查config目录下是否有**.p12文件，若存在，则删除。 启动传输软件。 new_udp_recv_4.2.2.jar 右键 -&gt; 以管理员身份运行 -&gt; 命令行 -&gt; 进入目录 -&gt; D:\software\隔离传输软件\反向\send 12java -jar new_udp_recv_4.2.2.jar设置密码口令保护窗口如果报错，需先运行jreUpdate1.8.jar 出现提示：系统检测到密钥尚未存在，是否需要生成密钥？ -&gt; 是 创建登录口令：123456。 确定，提示操作成功。 登录窗口： 操作员名称： administrator 操作员密码： 12345678 密钥保护口令： 123456 管理 -&gt; 密钥管理 -&gt; 导出密钥。 -&gt; sender.cer 上传/下载 -&gt; 反向隔离发送端证书 sender.cer 设定 -&gt; 配置加密隧道 隧道名称： Tunnel-1 隧道的协商IP地址： 192.168.1.200 -&gt; 设备ETH0协商IP 隧道的协商端口： 4558 隧道每次通过的文件数： 100 隔离设备证书路径： ../.. fsw.cer 设定 -&gt; 配置链路信息 链路名称： Link-1 目的IP地址： 192.168.1.12 -&gt; 接收端IP地址，正反向隔离在相同环境的情况下，配置虚拟IP。 目的端口： 7777 发送失败等待周期(秒)： 30 使用隧道： Tunnel-1 ㉘PC_7导入发送端证书。 发送端证书 -&gt; 删除其他 发送端证书 -&gt; 添加 发送端IP： 192.168.1.20 -&gt; 此处为发送端IP，不为虚拟IP 证书标识： sender.cer ㉙重启SW_2内网隔离与外网隔离。㉚PC_5发送E文本。 待发送的文件（E文本）-&gt; 右键 -&gt; 发送 任务名称： task1 目的文件夹： d:/test -&gt; 自定义 选择链路 -&gt; Link-1 -&gt; 添加 不符合发送条件的文件备份至 -&gt; 当前文档目录 查看日志及接收端是否发送成功。 如果发现隔离发送进行中一直在校验E文本规范，不发送的情况，重新打开发送端工具。 虚拟化纵向㉛创建虚拟化纵向[电力纵向]PS_1，开机㉜创建虚拟化纵向[电力纵向]PS_2，开机㉝创建虚拟路由器R，配置：网卡1：192.168.1.0/24 网卡2：192.168.2.0/24，开机㉞创建虚拟交换机 Switch_1，开机㉟创建虚拟主机[win7-2]PC_3，开机㊱创建虚拟主机[win7-2]PC_2，开机㊲创建虚拟主机[win7-2]PC_1，开机㊳创建虚拟USB-KEY UK_1，插入PS_1㊴创建虚拟USB-KEY UK_2，插入PS_2㊵配置Switch_1：1-2口配置VLAN1003㊶配置PC_3IP地址：169.254.200.201 255.255.255.0 169.254.200.1㊷配置PC_2IP地址：169.254.200.201 255.255.255.0 169.254.200.1㊸配置PC_1IP地址：192.168.2.20 255.255.255.0 192.168.2.1㊹创建网线，连接PS_1网口0与Switch_2网口4㊺创建网线，连接PS_1网口1与R网口1㊻创建网线，连接PS_2网口1与R网口2㊼创建网线，连接PS_2网口0与Switch_1网口1㊽创建网线，连接PC_1网卡0与Switch_1网口2㊾创建网线，连接PC_2网卡0与PS_2网卡4㊿创建网线，连接PC_3网卡0与PS_1网卡4(51)PC_3本地安装及配置纵向PS_1：安装纵向管理工具： 目录地址：d:/software/PSTunnel2000加密装置千兆管理工具.exe 屏幕分辨率 -&gt; 1024×768添加新操作员： 管理工具 -&gt; 右键 -&gt; 以管理员身份运行 操作员：init 密码：Tun-2000 设备IP：169.254.200.200 -&gt; 操作员 -&gt; 操作员管理 -&gt; 添加：+操作员： user -&gt; 确定导出导入证书： 初始化 -&gt; 生成设备密钥及证书请求 -&gt; 下一步 -&gt; 填写省/市/设备名 -&gt; 下一步 -&gt; 生成.csr证书 证书转换。使用证书工具2.0将.csr证书转换为.cer证书。传入对端。 证书 -&gt; 证书导入 -&gt; 远程设备证书 -&gt; 选择证书 -&gt; 确定VLAN配置： 本地ETH1：192.168.1.50 255.255.255.0 VLAN：0 远程ETH1：192.168.2.50 255.255.255.0 VLAN：0路由配置： 目的地址：192.168.2.50 子网掩码：255.255.255.0 网关地址：192.168.1.1安全隧道: -&gt; 恢复隧道配置 -&gt; 11.pbak -&gt; 配置写入装置 -&gt; 确定 -&gt; 修改隧道 -&gt; 确定 隧道名标识： 11 -&gt; 不支持修改 本地IP： 192.168.1.50 -&gt; 本地ETH1 远程IP： 192.168.2.50 -&gt; 远程ETH1 255.255.255.0 0.0.0.0 0.0.0.0 MTU： 1500安全策略： -&gt; 恢复策略配置 -&gt; 11.pbak -&gt; 配置写入装置 -&gt; 确定 -&gt; 修改策略 -&gt; 确定 标识id：0 本地IP： 192.168.1.50 -&gt; 本地ETH1 远程IP： 192.168.2.50 -&gt; 远程ETH1 本地起始IP：192.168.1.1 本地终止IP：192.168.1.254 远程起始IP：192.168.2.1 远程终止IP：192.168.2.254 方向：双向 重置隧道： -&gt; 管理 -&gt; 重置隧道 -&gt; OPENED 注意： *新纵向的用户名,密码：root, Tun-2000 纵向内部查询路由命令：1$ monipead.arm -all (52)PC_2本地安装及配置纵向PS_2：配置与以上相同，反向。 (53)PC_4配置静态路由：1route add -p 192.168.2.0 mask 255.255.255.0 192.168.1.1 (54)PC_1配置静态路由：1route add -p 192.168.1.0 mask 255.255.255.0 192.168.2.1 (55)验证纵向的功能：使用PC_4 ping PC_1 1ping 192.168.2.50 查看PS_2的eth1口是否抓到ESP报文包。]]></content>
      <categories>
        <category>Kedong</category>
      </categories>
      <tags>
        <tag>kedong</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[虚拟化隔离安装配置说明]]></title>
    <url>%2F2019%2F06%2F21%2F%E8%99%9A%E6%8B%9F%E5%8C%96%E9%9A%94%E7%A6%BB%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[虚拟化隔离安装配置说明创建纵向隔离组件[反向隔离] SW。创建主机组件[win7] PC。SW与PC通过串口线连接。 配置管理工具。打开QT界面隔离管理工具。 前提：windows虚拟机已经安装vc_redist.2015.x64 且QT管理工具中包含vcruntime140.dll，libcrypto-1_1.dll。 用户名：admin 密码：111111 串口登录。 串口：COM1。 频率：115200。 √ 反向隔离。 设备配置 -&gt; 基本配置 管理IP： 无 -&gt; 不填 设备名称： dev -&gt; 自定义 ETH0协商IP： 192.168.1.100 -&gt; 与发送端须配置成相同网段 ETH1协商IP： 0.0.0.0 -&gt; 可不做配置 规则配置 -&gt; 主机信息1 -&gt; 添加 √ IP和MAC地址绑定 主机名： sender -&gt; 自定义 MAC1： FA:16:3E:40:11:01 -&gt; 主机网卡MAC地址 主机IP： 192.168.1.10 -&gt; 主机网卡ip地址 主机虚拟IP1：ETH0协商IP与主机同网段时自动生成,不通网段时填写一个ETH0所在网段下任意IP地址 主机虚拟ip2：可以不填 规则配置 -&gt; 主机信息2 -&gt; 添加 √ IP和MAC地址绑定 主机名： receiver -&gt; 自定义 MAC1： FA:16:3E:40:11:02 -&gt; 主机网卡MAC地址 主机IP： 192.168.1.20 -&gt; 主机网卡ip地址 主机虚拟IP1：ETH0协商IP与主机同网段时自动生成,不通网段时填写一个ETH0所在网段下任意IP地址 主机虚拟ip2：可以不填 规则配置 -&gt; 连接信息 规则名： rule -&gt; 自定义 (内网)IP地址： 192.100.1.10 (内网)虚拟IP： 192.100.1.10 (内网)网口号： ETH0/网口0 (外网)IP地址： 192.100.1.20 (外网)虚拟IP： 192.100.1.20 (外网)网口号： ETH0/网口0 协议： UDP（反向） TCP正向 证书互导 设备密钥 √ RSA -&gt; 导出设备证书文件 -&gt; dev.cer 发送端证书 -&gt; 添加 发送端IP： 192.168.1.14 -&gt; 此处为发送端IP，不为虚拟IP 证书标识： sender.cer 管理工具配置好隔离之后，正反向隔离需重启生效。主机信息位置：/etc/mac.conf连接信息位置：/etc/rules 传输软件配置 检查config目录下是否有**.p12文件，若存在，则删除。 启动传输软件。 Stonewall-2000-Send.jar 右键 -&gt; 以管理员身份运行 -&gt; 命令行 -&gt; 12java -jar Stonewall-2000-Send.jar设置密码口令保护窗口如果报错，需先运行jreUpdate1.8.jar 出现提示：系统检测到密钥尚未存在，是否需要生成密钥？ -&gt; 是 创建登录口令：123456。 确定，提示操作成功。 登录窗口： 操作员名称： administrator 操作员密码： 12345678 密钥保护口令： 123456 管理 -&gt; 密钥管理 -&gt; 导出密钥。 -&gt; sender.cer 设定 -&gt; 配置加密隧道 隧道名称： Tunnel-1 隧道的协商IP地址： 192.168.1.100 -&gt; 设备ETH0协商IP 隧道的协商端口： 4558 隧道每次通过的文件数： 100 隔离设备证书路径： ../.. dev.cer 设定 -&gt; 配置链路信息 链路名称： Link-1 目的IP地址： 192.168.1.13 -&gt; 接收端IP地址，正反向隔离在相同环境的情况下，配置虚拟IP。 目的端口： 7777 发送失败等待周期(秒)： 30 使用隧道： Tunnel-1]]></content>
      <categories>
        <category>Eletric Power</category>
      </categories>
      <tags>
        <tag>eletric power</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Openstack Too many open files 错误与解决办法]]></title>
    <url>%2F2019%2F06%2F20%2FTooManyFiles%2F</url>
    <content type="text"><![CDATA[Openstack WebUI页面无法打开，页面报500错误，查看httpd-&gt;error_log日志报如下错误: 1234567891011[Tue Apr 02 14:01:05.658276 2019] [:error] [pid 9245] File "/usr/lib/python2.7/site-packages/requests/sessions.py", line 518, in request[Tue Apr 02 14:01:05.658280 2019] [:error] [pid 9245] File "/usr/lib/python2.7/site-packages/requests/sessions.py", line 639, in send[Tue Apr 02 14:01:05.658284 2019] [:error] [pid 9245] File "/usr/lib/python2.7/site-packages/requests/adapters.py", line 438, in send[Tue Apr 02 14:01:05.658287 2019] [:error] [pid 9245] File "/usr/lib/python2.7/site-packages/requests/packages/urllib3/connectionpool.py", line 588, in urlopen[Tue Apr 02 14:01:05.658291 2019] [:error] [pid 9245] File "/usr/lib/python2.7/site-packages/requests/packages/urllib3/connectionpool.py", line 241, in _get_conn[Tue Apr 02 14:01:05.658296 2019] [:error] [pid 9245] File "/usr/lib/python2.7/site-packages/requests/packages/urllib3/util/connection.py", line 27, in is_connection_dropped[Tue Apr 02 14:01:05.658300 2019] [:error] [pid 9245] File "/usr/lib/python2.7/site-packages/requests/packages/urllib3/util/wait.py", line 33, in wait_for_read[Tue Apr 02 14:01:05.658304 2019] [:error] [pid 9245] File "/usr/lib/python2.7/site-packages/requests/packages/urllib3/util/wait.py", line 22, in _wait_for_io_events[Tue Apr 02 14:01:05.658308 2019] [:error] [pid 9245] File "/usr/lib/python2.7/site-packages/requests/packages/urllib3/util/selectors.py", line 581, in DefaultSelector[Tue Apr 02 14:01:05.658312 2019] [:error] [pid 9245] File "/usr/lib/python2.7/site-packages/requests/packages/urllib3/util/selectors.py", line 394, in __init__[Tue Apr 02 14:01:05.658316 2019] [:error] [pid 9245] IOError: [Errno 24] Too many open files 解决方式：修改操作系统打开的文件数；登录到Controller节点，执行: 1234567891011121314151617[root@controller ~]# ulimit -acore file size (blocks, -c) 0data seg size (kbytes, -d) unlimitedscheduling priority (-e) 0file size (blocks, -f) unlimitedpending signals (-i) 60587max locked memory (kbytes, -l) 64max memory size (kbytes, -m) unlimitedopen files (-n) 1024pipe size (512 bytes, -p) 8POSIX message queues (bytes, -q) 819200real-time priority (-r) 0stack size (kbytes, -s) 8192cpu time (seconds, -t) unlimitedmax user processes (-u) 60587virtual memory (kbytes, -v) unlimitedfile locks (-x) unlimited 系统默认设置为1024。 使用命令查看当前打开文件数: 12[root@controller ~]# lsof | wc -l174911 修改vim /etc/security/limits.conf，在文件最后加入如下信息： 12* soft nofile 1024000* hard nofile 1024000 *表示所有用户，修改后重启服务器，配置生效。]]></content>
      <categories>
        <category>Openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[虚拟化纵向安装配置说明]]></title>
    <url>%2F2019%2F06%2F20%2F%E8%99%9A%E6%8B%9F%E5%8C%96%E7%BA%B5%E5%90%91%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[虚拟化纵向安装配置说明创建纵向组件[电力纵向] PS。创建主机组件[win7] PC。创建UKey组件 UKey。UKey插入PS。 配置PC。 IP地址：169.254.200.201 掩码：255.255.255.0 网关：169.254.200.1 PC网卡0与PS网卡4连接网线。PC本地安装纵向管理工具。 目录地址：d:/software/PSTunnel2000加密装置千兆管理工具.exe 添加新操作员。 右键 -&gt; 以管理员身份运行 -&gt; 操作员 -&gt; 操作员管理 -&gt; 添加：+操作员： user -&gt; 确定 导出导入证书。 -&gt; 初始化 -&gt; 生成设备密钥及证书请求 -&gt; 下一步 -&gt; 填写省/市/设备名 -&gt; 下一步 -&gt; 生成.csr证书 证书转换。使用证书工具2.0将.csr证书转换为.cer证书。传入对端。 -&gt; 证书 -&gt; 证书导入 -&gt; 远程设备证书 -&gt; 选择证书 -&gt; 确定 VLAN配置。 本地ETH1：192.168.1.100 255.255.255.0 VLAN：0 远程ETH1：192.168.1.200 255.255.255.0 VLAN：0 安全隧道。 -&gt; 恢复隧道配置 -&gt; 11.pbak -&gt; 配置写入装置 -&gt; 确定 -&gt; 修改隧道 -&gt; 确定 隧道名标识： 11 -&gt; 不支持修改 本地IP： 192.168.1.100 -&gt; 本地ETH1 远程IP： 192.168.1.200 -&gt; 远程ETH1 255.255.255.0 0.0.0.0 0.0.0.0 MTU： 1500 安全策略。 -&gt; 恢复策略配置 -&gt; 11.pbak -&gt; 配置写入装置 -&gt; 确定 -&gt; 修改策略 -&gt; 确定 标识id：0 本地IP： 192.168.1.100 -&gt; 本地ETH1 远程IP： 192.168.1.200 -&gt; 远程ETH1 本地起始IP：192.168.1.1 本地终止IP：192.168.1.254 远程起始IP：192.168.1.1 远程终止IP：192.168.1.254 方向：双向 重置隧道。 -&gt; 管理 -&gt; 重置隧道 -&gt; OPENED 注意： *新纵向的用户名,密码：root, Tun-2000 纵向内部查询路由命令：1$ monipead.arm -all]]></content>
      <categories>
        <category>Eletric Power</category>
      </categories>
      <tags>
        <tag>eletric power</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Openstack Queens Horizon（七）Horizon服务]]></title>
    <url>%2F2019%2F03%2F19%2FOpenstackQueens7%2F</url>
    <content type="text"><![CDATA[Controller节点：安装及配置：12345678910111213141516171819202122# yum install openstack-dashboard# vi /etc/openstack-dashboard/local_settingsOPENSTACK_HOST = "controller"ALLOWED_HOSTS = ['*']SESSION_ENGINE = 'django.contrib.sessions.backends.cache'CACHES = &#123; 'default': &#123; 'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache', 'LOCATION': 'controller:11211', &#125;&#125;OPENSTACK_KEYSTONE_URL = "http://%s:5000/v3" % OPENSTACK_HOSTOPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = TrueOPENSTACK_API_VERSIONS = &#123; "identity": 3, "image": 2, "volume": 2,&#125;OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = "Default"OPENSTACK_KEYSTONE_DEFAULT_ROLE = "user"TIME_ZONE = "Asia/Shanghai" 123# vi /etc/httpd/conf.d/openstack-dashboard.conf 在文件开头添加WSGIApplicationGroup %&#123;GLOBAL&#125;... 完成安装：1# systemctl restart httpd.service memcached.service 使用 http://controller/dashboard 上的Web浏览器访问Dashboard。]]></content>
      <categories>
        <category>Openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Openstack Queens 环境搭建（六）Neutron服务]]></title>
    <url>%2F2019%2F03%2F19%2FOpenstackQueens6%2F</url>
    <content type="text"><![CDATA[Controller节点：Neutron服务安装网络类型：vxlanLayer2 二层插件采用：openvswitch 创建neutron数据库，授予权限：123456$ mysql -u root -pMariaDB [(none)] CREATE DATABASE neutron;MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'localhost' IDENTIFIED BY '123456';MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'%' IDENTIFIED BY '123456';MariaDB [(none)]&gt; exit; 创建neutron用户：1234567891011121314151617$ . admin-openrc$ openstack user create --domain default --password-prompt neutronUser Password: 123456Repeat User Password: 123456+---------------------+----------------------------------+| Field | Value |+---------------------+----------------------------------+| domain_id | default || enabled | True || id | 463fd14bf95b4cc49c0378623de56ffa || name | neutron || options | &#123;&#125; || password_expires_at | None |+---------------------+----------------------------------+$ openstack role add --project service --user neutron admin 创建neutron服务实体：12345678910$ openstack service create --name neutron --description "OpenStack Networking" network+-------------+----------------------------------+| Field | Value |+-------------+----------------------------------+| description | OpenStack Networking || enabled | True || id | e10e48790ede425ea81e1a62250f124a || name | neutron || type | network |+-------------+----------------------------------+ 创建网络服务API端点：1234567891011121314$ openstack endpoint create --region RegionOne network public http://controller:9696+--------------+----------------------------------+| Field | Value |+--------------+----------------------------------+| enabled | True || id | f688ed8f1bf340d78794b600fa512145 || interface | public || region | RegionOne || region_id | RegionOne || service_id | e10e48790ede425ea81e1a62250f124a || service_name | neutron || service_type | network || url | http://controller:9696 |+--------------+----------------------------------+ 1234567891011121314$ openstack endpoint create --region RegionOne network internal http://controller:9696+--------------+----------------------------------+| Field | Value |+--------------+----------------------------------+| enabled | True || id | 571a008230c54cf8bcb1e38a75787c3f || interface | internal || region | RegionOne || region_id | RegionOne || service_id | e10e48790ede425ea81e1a62250f124a || service_name | neutron || service_type | network || url | http://controller:9696 |+--------------+----------------------------------+ 1234567891011121314$ openstack endpoint create --region RegionOne network admin http://controller:9696+--------------+----------------------------------+| Field | Value |+--------------+----------------------------------+| enabled | True || id | a8d654c1c878423789aab3fa7cf634cb || interface | admin || region | RegionOne || region_id | RegionOne || service_id | e10e48790ede425ea81e1a62250f124a || service_name | neutron || service_type | network || url | http://controller:9696 |+--------------+----------------------------------+ 安装及配置：12345678910111213141516171819202122232425262728293031323334# yum install openstack-neutron openstack-neutron-ml2 openstack-neutron-openvswitch ebtables# vi /etc/neutron/neutron.conf[DEFAULT]auth_strategy = keystonecore_plugin = ml2service_plugins = routerallow_overlapping_ips = Truetransport_url = rabbit://openstack:123456@controllernotify_nova_on_port_status_changes = truenotify_nova_on_port_data_changes = true[database]connection = mysql+pymysql://neutron:123456@controller/neutron[keystone_authtoken]auth_uri = http://controller:5000auth_url = http://controller:35357memcached_servers = controller:11211auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultproject_name = serviceusername = neutronpassword = 123456[nova]auth_url = http://controller:35357auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultregion_name = RegionOneproject_name = serviceusername = novapassword = 123456[oslo_concurrency]lock_path = /var/lib/neutron/tmp 1234567891011121314# vi /etc/neutron/plugins/ml2/ml2_conf.ini[ml2]type_drivers = flat,vlan,vxlantenant_network_types = vxlanmechanism_drivers = openvswitch,l2populationextension_drivers = port_security[ml2_type_flat]flat_networks = provider[ml2_type_vlan]#network_vlan_ranges = provider:1:1000[ml2_type_vxlan]vni_ranges = 1:1000[securitygroup]enable_ipset = true 123# vi /etc/sysctl.confnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1 1234# vi /etc/neutron/l3_agent.ini[DEFAULT]interface_driver = openvswitchexternal_network_bridge = 12345# vi /etc/neutron/dhcp_agent.ini[DEFAULT]interface_driver = openvswitchdhcp_driver = neutron.agent.linux.dhcp.Dnsmasqenable_isolated_metadata = true 1234# vi /etc/neutron/metadata_agent.ini[DEFAULT]nova_metadata_host = controllermetadata_proxy_shared_secret = 123456 123456789# vi /etc/neutron/plugins/ml2/openvswitch_agent.ini[agent]tunnel_types = vxlanl2_population = True[ovs]bridge_mappings = provider:br-providerlocal_ip = 10.0.0.11[securitygroup]firewall_driver = iptables_hybrid 完成安装：123456789101112131415161718# ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini# su -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron# systemctl restart openstack-nova-api.service# systemctl start neutron-server.service# systemctl start neutron-openvswitch-agent.service# ovs-vsctl add-br br-provider# ifconfig eth0 0.0.0.0# ifconfig br-provider 192.100.10.160/24# route add default gw 192.100.10.1# systemctl restart neutron-server.service# systemctl restart neutron-openvswitch-agent.service# systemctl enable neutron-server.service neutron-openvswitch-agent.service neutron-dhcp-agent.service neutron-metadata-agent.service# systemctl start neutron-dhcp-agent.service neutron-metadata-agent.service# systemctl enable neutron-l3-agent.service# systemctl start neutron-l3-agent.service Compute节点：安装及配置：yum install openstack-neutron-openvswitch ebtables ipset1234567891011121314151617# vi /etc/neutron/neutron.conf[DEFAULT]transport_url = rabbit://openstack:123456@controllerauth_strategy = keystone[keystone_authtoken]auth_uri = http://controller:5000auth_url = http://controller:35357memcached_servers = controller:11211auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultproject_name = serviceusername = neutronpassword = 123456[oslo_concurrency]lock_path = /var/lib/neutron/tmp 12345678# vi /etc/neutron/plugins/ml2/openvswitch_agent.ini[ovs]local_ip = 10.0.0.21[agent]tunnel_types = vxlanl2_population = True# systemctl restart neutron-openvswitch-agent.service 123456789101112# vi /etc/nova/nova.conf...[neutron]url = http://controller:9696auth_url = http://controller:35357auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultregion_name = RegionOneproject_name = serviceusername = neutronpassword = 123456 完成安装：123# systemctl restart openstack-nova-compute.service# systemctl enable neutron-openvswitch-agent.service# systemctl start neutron-openvswitch-agent.service Controller节点：验证操作：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051$ . admin-openrc$ openstack extension list --network+----------------------------------------------------------------------------------------------+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+| Name | Alias | Description |+----------------------------------------------------------------------------------------------+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+| Default Subnetpools | default-subnetpools | Provides ability to mark and use a subnetpool as the default. || Availability Zone | availability_zone | The availability zone extension. || Network Availability Zone | network_availability_zone | Availability zone support for network. || Auto Allocated Topology Services | auto-allocated-topology | Auto Allocated Topology Services. || Neutron L3 Configurable external gateway mode | ext-gw-mode | Extension of the router abstraction for specifying whether SNAT should occur on the external gateway || Port Binding | binding | Expose port bindings of a virtual port to external application || agent | agent | The agent management extension. || Subnet Allocation | subnet_allocation | Enables allocation of subnets from a subnet pool || L3 Agent Scheduler | l3_agent_scheduler | Schedule routers among l3 agents || Tag support | tag | Enables to set tag on resources. || Neutron external network | external-net | Adds external network attribute to network resource. || Tag support for resources with standard attribute: trunk, policy, security_group, floatingip | standard-attr-tag | Enables to set tag on resources with standard attribute. || Neutron Service Flavors | flavors | Flavor specification for Neutron advanced services. || Network MTU | net-mtu | Provides MTU attribute for a network resource. || Network IP Availability | network-ip-availability | Provides IP availability data for each network and subnet. || Quota management support | quotas | Expose functions for quotas management per tenant || If-Match constraints based on revision_number | revision-if-match | Extension indicating that If-Match based on revision_number is supported. || HA Router extension | l3-ha | Adds HA capability to routers. || Provider Network | provider | Expose mapping of virtual networks to physical networks || Multi Provider Network | multi-provider | Expose mapping of virtual networks to multiple physical networks || Quota details management support | quota_details | Expose functions for quotas usage statistics per project || Address scope | address-scope | Address scopes extension. || Neutron Extra Route | extraroute | Extra routes configuration for L3 router || Network MTU (writable) | net-mtu-writable | Provides a writable MTU attribute for a network resource. || Subnet service types | subnet-service-types | Provides ability to set the subnet service_types field || Resource timestamps | standard-attr-timestamp | Adds created_at and updated_at fields to all Neutron resources that have Neutron standard attributes. || Neutron 服务类型管理 | service-type | 用于为 Neutron 高级服务检索服务提供程序的 API || Router Flavor Extension | l3-flavors | Flavor support for routers. || Port Security | port-security | Provides port security || Neutron Extra DHCP options | extra_dhcp_opt | Extra options configuration for DHCP. For example PXE boot options to DHCP clients can be specified (e.g. tftp-server, server-ip-address, bootfile-name) || Resource revision numbers | standard-attr-revisions | This extension will display the revision number of neutron resources. || Pagination support | pagination | Extension that indicates that pagination is enabled. || Sorting support | sorting | Extension that indicates that sorting is enabled. || security-group | security-group | The security groups extension. || DHCP Agent Scheduler | dhcp_agent_scheduler | Schedule networks among dhcp agents || Router Availability Zone | router_availability_zone | Availability zone support for router. || RBAC Policies | rbac-policies | Allows creation and modification of policies that control tenant access to resources. || Tag support for resources: subnet, subnetpool, port, router | tag-ext | Extends tag support to more L2 and L3 resources. || standard-attr-description | standard-attr-description | Extension to add descriptions to standard attributes || IP address substring filtering | ip-substring-filtering | Provides IP address substring filtering when listing ports || Neutron L3 Router | router | Router abstraction for basic L3 forwarding between L2 Neutron networks and access to external networks via a NAT gateway. || Allowed Address Pairs | allowed-address-pairs | Provides allowed address pairs || project_id field enabled | project-id | Extension that indicates that project_id field is enabled. || Distributed Virtual Router | dvr | Enables configuration of Distributed Virtual Routers. |+----------------------------------------------------------------------------------------------+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+ 12345678910$ openstack network agent list+--------------------------------------+--------------------+------------+-------------------+-------+-------+---------------------------+| ID | Agent Type | Host | Availability Zone | Alive | State | Binary |+--------------------------------------+--------------------+------------+-------------------+-------+-------+---------------------------+| 0fcf4aa9-3592-4552-9b4c-f2b55e23ef6b | DHCP agent | controller | nova | :-) | UP | neutron-dhcp-agent || 1a08e5eb-d867-4697-850d-bd2400134162 | Metadata agent | controller | None | :-) | UP | neutron-metadata-agent || 9a33be1e-61bd-4d6b-9ee1-bda6dc7b44cd | Linux bridge agent | controller | None | :-) | UP | neutron-linuxbridge-agent || bfdb443d-feee-4006-8618-558b73c3c4a2 | L3 agent | controller | nova | :-) | UP | neutron-l3-agent || ce5abc8d-504a-4164-ae0f-801e56a06653 | Linux bridge agent | compute | None | :-) | UP | neutron-linuxbridge-agent |+--------------------------------------+--------------------+------------+-------------------+-------+-------+---------------------------+]]></content>
      <categories>
        <category>Openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Openstack Queens 环境搭建（五）Nova服务]]></title>
    <url>%2F2019%2F03%2F19%2FOpenstackQueens5%2F</url>
    <content type="text"><![CDATA[Controller节点：创建 nova_api, nova,和 nova_cell0 的数据库，授予权限：1234567891011121314$ mysql -u root -pMariaDB [(none)]&gt;CREATE DATABASE nova_api;MariaDB [(none)]&gt; CREATE DATABASE nova;MariaDB [(none)]&gt; CREATE DATABASE nova_cell0;MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'localhost' IDENTIFIED BY '123456';MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'%' IDENTIFIED BY '123456';MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'localhost' IDENTIFIED BY '123456';MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'%' IDENTIFIED BY '123456';MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'localhost' IDENTIFIED BY '123456';MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'%' IDENTIFIED BY '123456';MariaDB [(none)]&gt; exit; 创建nova用户：1234567891011121314151617$ . admin-openrc$ openstack user create --domain default --password-prompt novaUser Password: 123456Repeat User Password: 123456+---------------------+----------------------------------+| Field | Value |+---------------------+----------------------------------+| domain_id | default || enabled | True || id | 81f1d5dfad5a42bb806d197ceb9881ce || name | nova || options | &#123;&#125; || password_expires_at | None |+---------------------+----------------------------------+$ openstack role add --project service --user nova admin 创建nova服务实体：12345678910$ openstack service create --name nova --description "OpenStack Compute" compute+-------------+----------------------------------+| Field | Value |+-------------+----------------------------------+| description | OpenStack Compute || enabled | True || id | 3e011d345e4442fe8a232ab5ab1f8323 || name | nova || type | compute |+-------------+----------------------------------+ 创建Compute API服务端点：1234567891011121314$ openstack endpoint create --region RegionOne compute public http://controller:8774/v2.1+--------------+----------------------------------+| Field | Value |+--------------+----------------------------------+| enabled | True || id | 343b6a8fc9564623aca0097b2383650d || interface | public || region | RegionOne || region_id | RegionOne || service_id | 3e011d345e4442fe8a232ab5ab1f8323 || service_name | nova || service_type | compute || url | http://controller:8774/v2.1 |+--------------+----------------------------------+ 1234567891011121314$ openstack endpoint create --region RegionOne compute internal http://controller:8774/v2.1+--------------+----------------------------------+| Field | Value |+--------------+----------------------------------+| enabled | True || id | 3458cf55ac8b44d58c949fe88bf9afe3 || interface | internal || region | RegionOne || region_id | RegionOne || service_id | 3e011d345e4442fe8a232ab5ab1f8323 || service_name | nova || service_type | compute || url | http://controller:8774/v2.1 |+--------------+----------------------------------+ 1234567891011121314$ openstack endpoint create --region RegionOne compute admin http://controller:8774/v2.1+--------------+----------------------------------+| Field | Value |+--------------+----------------------------------+| enabled | True || id | 9f9115389c2a49a2874761b92c849bb0 || interface | admin || region | RegionOne || region_id | RegionOne || service_id | 3e011d345e4442fe8a232ab5ab1f8323 || service_name | nova || service_type | compute || url | http://controller:8774/v2.1 |+--------------+----------------------------------+ 创建Placement服务相关：123456789101112131415$ openstack user create --domain default --password-prompt placementUser Password: 123456Repeat User Password: 123456+---------------------+----------------------------------+| Field | Value |+---------------------+----------------------------------+| domain_id | default || enabled | True || id | 74870bc86a7c4108869c620099bffc30 || name | placement || options | &#123;&#125; || password_expires_at | None |+---------------------+----------------------------------+$ openstack role add --project service --user placement admin 12345678910$ openstack service create --name placement --description "Placement API" placement+-------------+----------------------------------+| Field | Value |+-------------+----------------------------------+| description | Placement API || enabled | True || id | bbd270a97c3a499fb73765120094e9da || name | placement || type | placement |+-------------+----------------------------------+ 1234567891011121314$ openstack endpoint create --region RegionOne placement public http://controller:8778+--------------+----------------------------------+| Field | Value |+--------------+----------------------------------+| enabled | True || id | d79b3b62302a4055924762ac676fc9b4 || interface | public || region | RegionOne || region_id | RegionOne || service_id | bbd270a97c3a499fb73765120094e9da || service_name | placement || service_type | placement || url | http://controller:8778 |+--------------+----------------------------------+ 1234567891011121314$ openstack endpoint create --region RegionOne placement internal http://controller:8778+--------------+----------------------------------+| Field | Value |+--------------+----------------------------------+| enabled | True || id | 5424919fbee34a7a92946c607706b38a || interface | internal || region | RegionOne || region_id | RegionOne || service_id | bbd270a97c3a499fb73765120094e9da || service_name | placement || service_type | placement || url | http://controller:8778 |+--------------+----------------------------------+ 1234567891011121314$ openstack endpoint create --region RegionOne placement admin http://controller:8778+--------------+----------------------------------+| Field | Value |+--------------+----------------------------------+| enabled | True || id | d9d5626cdb5442ac91dff8c1588f4726 || interface | admin || region | RegionOne || region_id | RegionOne || service_id | bbd270a97c3a499fb73765120094e9da || service_name | placement || service_type | placement || url | http://controller:8778 |+--------------+----------------------------------+ 安装和配置：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556# yum install openstack-nova-api openstack-nova-conductor openstack-nova-console openstack-nova-novncproxy openstack-nova-scheduler openstack-nova-placement-api# vi /etc/nova/nova.conf[DEFAULT]my_ip=192.100.10.160use_neutron=truefirewall_driver=nova.virt.firewall.NoopFirewallDriverenabled_apis=osapi_compute,metadatatransport_url=rabbit://openstack:123456@controller[api]auth_strategy=keystone[api_database]connection = mysql+pymysql://nova:123456@controller/nova_api[database]connection = mysql+pymysql://nova:123456@controller/nova[glance]api_servers = http://controller:9292[keystone_authtoken]auth_url = http://controller:5000/v3memcached_servers = controller:11211auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultproject_name = serviceusername = novapassword = 123456[libvirt]#virt_type=kvm[neutron]url = http://controller:9696auth_url = http://controller:35357auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultregion_name = RegionOneproject_name = serviceusername = neutronpassword = 123456service_metadata_proxy = truemetadata_proxy_shared_secret = 123456[oslo_concurrency]lock_path=/var/lib/nova/tmp[placement]os_region_name = RegionOneproject_domain_name = Defaultproject_name = serviceauth_type = passworduser_domain_name = Defaultauth_url = http://controller:5000/v3username = placementpassword = 123456[vnc]enabled=trueserver_listen=$my_ipserver_proxyclient_address=$my_ip#novncproxy_base_url=http://127.0.0.1:6080/vnc_auto.html 12345678910# vi /etc/httpd/conf.d/00-nova-placement-api.conf 在最下方加入&lt;Directory /usr/bin&gt; &lt;IfVersion &gt;= 2.4&gt; Require all granted &lt;/IfVersion&gt; &lt;IfVersion &lt; 2.4&gt; Order allow,deny Allow from all &lt;/IfVersion&gt;&lt;/Directory&gt; 完成安装：1234567891011121314# systemctl restart httpd# su -s /bin/sh -c "nova-manage api_db sync" nova# su -s /bin/sh -c "nova-manage cell_v2 map_cell0" nova# su -s /bin/sh -c "nova-manage cell_v2 create_cell --name=cell1 --verbose" nova# su -s /bin/sh -c "nova-manage db sync" nova# nova-manage cell_v2 list_cells+-------+--------------------------------------+------------------------------------+-------------------------------------------------+| 名称 | UUID | Transport URL | 数据库连接 |+-------+--------------------------------------+------------------------------------+-------------------------------------------------+| cell0 | 00000000-0000-0000-0000-000000000000 | none:/ | mysql+pymysql://nova:****@controller/nova_cell0 || cell1 | c795b2eb-4814-4fe7-b9ff-090a1b1b2be5 | rabbit://openstack:****@controller | mysql+pymysql://nova:****@controller/nova |+-------+--------------------------------------+------------------------------------+-------------------------------------------------+ 12# systemctl enable openstack-nova-api.service openstack-nova-consoleauth.service openstack-nova-scheduler.service openstack-nova-conductor.service openstack-nova-novncproxy.service# systemctl start openstack-nova-api.service openstack-nova-consoleauth.service openstack-nova-scheduler.service openstack-nova-conductor.service openstack-nova-novncproxy.service Compute节点：安装和配置：1234567891011121314151617181920212223242526272829303132333435363738# yum install openstack-nova-compute# vi /etc/nova/nova.conf[DEFAULT]my_ip = 192.100.10.161enabled_apis = osapi_compute,metadatause_neutron = Truefirewall_driver = nova.virt.firewall.NoopFirewallDrivertransport_url = rabbit://openstack:123456@controller[api]auth_strategy = keystone[vnc]enabled = Trueserver_listen = 0.0.0.0server_proxyclient_address = $my_ipnovncproxy_base_url = http://controller:6080/vnc_auto.html[glance]api_servers = http://controller:9292[oslo_concurrency]lock_path = /var/lib/nova/tmp[placement]os_region_name = RegionOneproject_domain_name = Defaultproject_name = serviceauth_type = passworduser_domain_name = Defaultauth_url = http://controller:5000/v3username = placementpassword = 123456[keystone_authtoken]auth_url = http://controller:5000/v3memcached_servers = controller:11211auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultproject_name = serviceusername = novapassword = 123456 完成安装12# systemctl enable libvirtd.service openstack-nova-compute.service# systemctl start libvirtd.service openstack-nova-compute.service Controller节点：将计算节点添加到cell数据库：12345678$ . admin-openrc$ openstack compute service list --service nova-compute+----+--------------+-----------------------+------+---------+-------+----------------------------+| ID | Binary | Host | Zone | Status | State | Updated At |+----+--------------+-----------------------+------+---------+-------+----------------------------+| 9 | nova-compute | localhost.localdomain | nova | enabled | up | 2018-09-13T02:59:06.000000 |+----+--------------+-----------------------+------+---------+-------+----------------------------+ 发现计算主机：123456789101112131415# su -s /bin/sh -c "nova-manage cell_v2 discover_hosts --verbose" nova/usr/lib/python2.7/site-packages/oslo_db/sqlalchemy/enginefacade.py:332: NotSupportedWarning: Configuration option(s) ['use_tpool'] not supported exception.NotSupportedWarningFound 2 cell mappings.Skipping cell0 since it does not contain hosts.Getting computes from cell 'cell1': c795b2eb-4814-4fe7-b9ff-090a1b1b2be5Checking host mapping for compute host 'localhost.localdomain': 58be78ad-5220-4869-ab31-33c9674ecfd1Creating host mapping for compute host 'localhost.localdomain': 58be78ad-5220-4869-ab31-33c9674ecfd1Found 1 unmapped computes in cell: c795b2eb-4814-4fe7-b9ff-090a1b1b2be5注意：添加新计算节点时，必须在控制器节点上运行nova-manage cell_v2 discover_hosts以注册这些新计算节点。或者，您可以在 /etc/nova/nova.conf 中设置适当的间隔：[scheduler]discover_hosts_in_cells_interval = 300 验证：1234567891011$ . admin-openrc$ openstack compute service list+----+------------------+-----------------------+----------+---------+-------+----------------------------+| ID | Binary | Host | Zone | Status | State | Updated At |+----+------------------+-----------------------+----------+---------+-------+----------------------------+| 1 | nova-conductor | controller | internal | enabled | up | 2018-09-13T03:00:28.000000 || 3 | nova-consoleauth | controller | internal | enabled | up | 2018-09-13T03:00:29.000000 || 4 | nova-scheduler | controller | internal | enabled | up | 2018-09-13T03:00:29.000000 || 9 | nova-compute | localhost.localdomain | nova | enabled | up | 2018-09-13T03:00:26.000000 |+----+------------------+-----------------------+----------+---------+-------+----------------------------+ 123456789101112131415161718192021222324252627282930313233$ openstack catalog list+-----------+-----------+-----------------------------------------+| Name | Type | Endpoints |+-----------+-----------+-----------------------------------------+| keystone | identity | RegionOne || | | public: http://controller:5000/v3/ || | | RegionOne || | | internal: http://controller:5000/v3/ || | | RegionOne || | | admin: http://controller:5000/v3/ || | | || nova | compute | RegionOne || | | public: http://controller:8774/v2.1 || | | RegionOne || | | internal: http://controller:8774/v2.1 || | | RegionOne || | | admin: http://controller:8774/v2.1 || | | || glance | image | RegionOne || | | internal: http://controller:9292 || | | RegionOne || | | admin: http://controller:9292 || | | RegionOne || | | public: http://controller:9292 || | | || placement | placement | RegionOne || | | internal: http://controller:8778 || | | RegionOne || | | public: http://controller:8778 || | | RegionOne || | | admin: http://controller:8778 || | | |+-----------+-----------+-----------------------------------------+ 123456$ openstack image list+--------------------------------------+--------+--------+| ID | Name | Status |+--------------------------------------+--------+--------+| ad7da2d4-cb83-4a41-836f-e58e47e899f5 | cirros | active |+--------------------------------------+--------+--------+ 123456789101112131415161718192021222324252627# nova-status upgrade check/usr/lib/python2.7/site-packages/oslo_db/sqlalchemy/enginefacade.py:332: NotSupportedWarning: Configuration option(s) ['use_tpool'] not supported exception.NotSupportedWarningOption "os_region_name" from group "placement" is deprecated. Use option "region-name" from group "placement".+-------------------------------+| 升级检查结果 |+-------------------------------+| 检查: Cells v2 || 结果: 成功 || 详情: None |+-------------------------------+| 检查: Placement API || 结果: 成功 || 详情: None |+-------------------------------+| 检查: Resource Providers || 结果: 成功 || 详情: None |+-------------------------------+| 检查: Ironic Flavor Migration || 结果: 成功 || 详情: None |+-------------------------------+| 检查: API Service Version || 结果: 成功 || 详情: None |+-------------------------------+]]></content>
      <categories>
        <category>Openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Openstack Queens 环境搭建（四）Glance服务]]></title>
    <url>%2F2019%2F03%2F19%2FOpenstackQueens4%2F</url>
    <content type="text"><![CDATA[Controller节点：创建glance数据库，授予权限：12345$ mysql -u root -pMariaDB [(none)]&gt; CREATE DATABASE glance;MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' IDENTIFIED BY '123456';MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%' IDENTIFIED BY '123456';MariaDB [(none)]&gt; exit; 创建glance用户：1234567891011121314151617$ . admin-openrc$ openstack user create --domain default --password-prompt glanceUser Password: 123456Repeat User Password: 123456+---------------------+----------------------------------+| Field | Value |+---------------------+----------------------------------+| domain_id | default || enabled | True || id | 5b7e76213b4b4945b7c702be5b595c0e || name | glance || options | &#123;&#125; || password_expires_at | None |+---------------------+----------------------------------+$ openstack role add --project service --user glance admin 创建glance服务实体：12345678910$ openstack service create --name glance --description "OpenStack Image" image+-------------+----------------------------------+| Field | Value |+-------------+----------------------------------+| description | OpenStack Image || enabled | True || id | b9cfd97d134e4ec2bf19d78306e85a5a || name | glance || type | image |+-------------+----------------------------------+ 创建API端点：1234567891011121314$ openstack endpoint create --region RegionOne image public http://controller:9292+--------------+----------------------------------+| Field | Value |+--------------+----------------------------------+| enabled | True || id | b9c90172de704ea4a867190ba44fc931 || interface | public || region | RegionOne || region_id | RegionOne || service_id | b9cfd97d134e4ec2bf19d78306e85a5a || service_name | glance || service_type | image || url | http://controller:9292 |+--------------+----------------------------------+ 1234567891011121314$ openstack endpoint create --region RegionOne image internal http://controller:9292+--------------+----------------------------------+| Field | Value |+--------------+----------------------------------+| enabled | True || id | 074bde7662044e93830f4eca15d9c887 || interface | internal || region | RegionOne || region_id | RegionOne || service_id | b9cfd97d134e4ec2bf19d78306e85a5a || service_name | glance || service_type | image || url | http://controller:9292 |+--------------+----------------------------------+ 1234567891011121314$ openstack endpoint create --region RegionOne image admin http://controller:9292+--------------+----------------------------------+| Field | Value |+--------------+----------------------------------+| enabled | True || id | 17030061f9b84301ac515765706933b2 || interface | admin || region | RegionOne || region_id | RegionOne || service_id | b9cfd97d134e4ec2bf19d78306e85a5a || service_name | glance || service_type | image || url | http://controller:9292 |+--------------+----------------------------------+ 安装和配置：12345678910111213141516171819202122232425262728293031323334353637383940# yum install openstack-glance# vi /etc/glance/glance-api.conf[database]connection = mysql+pymysql://glance:123456@controller/glance[glance_store]stores = file,httpdefault_store = filefilesystem_store_datadir = /var/lib/glance/images/[keystone_authtoken]auth_uri = http://controller:5000auth_url = http://controller:5000memcached_servers = controller:11211auth_type = passwordproject_domain_name = Defaultuser_domain_name = Defaultproject_name = serviceusername = glancepassword = 123456[paste_deploy]flavor = keystone# vi /etc/glance/glance-registry.conf[database]connection = mysql+pymysql://glance:123456@controller/glance[keystone_authtoken]auth_uri = http://controller:5000auth_url = http://controller:5000memcached_servers = controller:11211auth_type = passwordproject_domain_name = Defaultuser_domain_name = Defaultproject_name = serviceusername = glancepassword = 123456[paste_deploy]flavor = keystone# su -s /bin/sh -c "glance-manage db_sync" glance 完成安装12# systemctl enable openstack-glance-api.service openstack-glance-registry.service# systemctl start openstack-glance-api.service openstack-glance-registry.service 验证操作123456789101112131415161718192021222324252627282930$ . admin-openrc$ wget http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img$ openstack image create "cirros" \ --file cirros-0.3.5-x86_64-disk.img \ --disk-format qcow2 --container-format bare \ --public+------------------+------------------------------------------------------+| Field | Value |+------------------+------------------------------------------------------+| checksum | f8ab98ff5e73ebab884d80c9dc9c7290 || container_format | bare || created_at | 2018-09-13T00:55:04Z || disk_format | qcow2 || file | /v2/images/ad7da2d4-cb83-4a41-836f-e58e47e899f5/file || id | ad7da2d4-cb83-4a41-836f-e58e47e899f5 || min_disk | 0 || min_ram | 0 || name | cirros || owner | 4a5e42dd8cbf410f85a5f145039d69a6 || protected | False || schema | /v2/schemas/image || size | 13267968 || status | active || tags | || updated_at | 2018-09-13T00:55:04Z || virtual_size | None || visibility | public |+------------------+------------------------------------------------------+ 123456$ openstack image list+--------------------------------------+--------+--------+| ID | Name | Status |+--------------------------------------+--------+--------+| ad7da2d4-cb83-4a41-836f-e58e47e899f5 | cirros | active |+--------------------------------------+--------+--------+]]></content>
      <categories>
        <category>Openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Openstack Queens 环境搭建（三）Keystone服务]]></title>
    <url>%2F2019%2F03%2F19%2FOpenstackQueens3%2F</url>
    <content type="text"><![CDATA[Controller节点：创建keystone数据库，授予权限：12345678$ mysql -u root -p密码：123456MariaDB [(none)]&gt; CREATE DATABASE keystone;MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' \IDENTIFIED BY '123456';MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' \IDENTIFIED BY '123456';MariaDB [(none)]&gt; exit; 安装及配置组件12345678910111213141516# yum install openstack-keystone httpd mod_wsgi# vi /etc/keystone/keystone.conf[database]connection = mysql+pymysql://keystone:123456@controller/keystone[token]provider = fernet# su -s /bin/sh -c "keystone-manage db_sync" keystone# keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone# keystone-manage credential_setup --keystone-user keystone --keystone-group keystone# keystone-manage bootstrap --bootstrap-password 123456 \ --bootstrap-admin-url http://controller:5000/v3/ \ --bootstrap-internal-url http://controller:5000/v3/ \ --bootstrap-public-url http://controller:5000/v3/ \ --bootstrap-region-id RegionOne 配置Apache HTTP Server1234# vi /etc/httpd/conf/httpd.confServerName controller# ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/ 完成安装：12# systemctl enable httpd.service# systemctl start httpd.service 配置管理帐户1234567$ export OS_USERNAME=admin$ export OS_PASSWORD=123456$ export OS_PROJECT_NAME=admin$ export OS_USER_DOMAIN_NAME=Default$ export OS_PROJECT_DOMAIN_NAME=Default$ export OS_AUTH_URL=http://controller:35357/v3$ export OS_IDENTITY_API_VERSION=3 创建域、项目、用户和角色：12345678910$ openstack domain create --description "An Example Domain" example+-------------+----------------------------------+| Field | Value |+-------------+----------------------------------+| description | An Example Domain || enabled | True || id | 2f338489f6c64472a0b2b6db54ecc2df || name | example || tags | [] |+-------------+----------------------------------+ 12345678910111213$ openstack project create --domain default --description "Service Project" service+-------------+----------------------------------+| Field | Value |+-------------+----------------------------------+| description | Service Project || domain_id | default || enabled | True || id | 84218999229845e2ad7f4e88208b3bee || is_domain | False || name | service || parent_id | default || tags | [] |+-------------+----------------------------------+ 12345678910111213$ openstack project create --domain default --description "Demo Project" demo+-------------+----------------------------------+| Field | Value |+-------------+----------------------------------+| description | Demo Project || domain_id | default || enabled | True || id | 5c4692ce6659454eb830e7e9633a09f1 || is_domain | False || name | demo || parent_id | default || tags | [] |+-------------+----------------------------------+ 12345678910111213$ openstack user create --domain default --password-prompt demoUser Password:123456Repeat User Password:123456+---------------------+----------------------------------+| Field | Value |+---------------------+----------------------------------+| domain_id | default || enabled | True || id | 803e7ad2e94b4af39f9be9e0742b45fd || name | demo || options | &#123;&#125; || password_expires_at | None |+---------------------+----------------------------------+ 12345678910$ openstack role create user+-----------+----------------------------------+| Field | Value |+-----------+----------------------------------+| domain_id | None || id | cbe4799bac204eacbf0012a77dc349c4 || name | user |+-----------+----------------------------------+$ openstack role add --project demo --user demo user 验证操作：123456789101112131415161718192021222324252627$ unset OS_AUTH_URL OS_PASSWORD$ openstack --os-auth-url http://controller:35357/v3 \ --os-project-domain-name Default --os-user-domain-name Default \ --os-project-name admin --os-username admin token issuePassword: 123456+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| Field | Value |+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| expires | 2018-09-12T09:43:34+0000 || id | gAAAAABbmNG25wIya-0xFYb3zCW3ljtDTWnr8ZCpB4iAZPMfQnP-62EGiIr6aKEjO847h6jH5nNONRqeLXO2BC_bJ0O-b5Fwj2GZpYGWRSSucAU4Mh6MqLQzetbOsRCv9-ZGO6VQYkmr0cPTEm7kzuzUL2bwTcUCbAVCpuFvCnRUZ7Hu4FE5bAI || project_id | 4a5e42dd8cbf410f85a5f145039d69a6 || user_id | 2ffffa1e6cbe4d239bdacc9760a54dd5 |+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+$ openstack --os-auth-url http://controller:5000/v3 \ --os-project-domain-name Default --os-user-domain-name Default \ --os-project-name demo --os-username demo token issuePassword: 123456+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| Field | Value |+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| expires | 2018-09-12T09:45:20+0000 || id | gAAAAABbmNIgtMBObdQXwOlGu-HMLvKNTBZuYvVizTCn3aDJLMvqzQRTyjhfm5RjEkAgIWcYfal9TrjZan2VWL_AZ8cASpkBwoa0TQn_rWlZw1wh8xcDeb5XNES3jMNxhtZA87peDCnMkGJoMaJVhvkR4gsDQiIUmCImzjYv6ZvJjLgGEotBszY || project_id | 5c4692ce6659454eb830e7e9633a09f1 || user_id | 803e7ad2e94b4af39f9be9e0742b45fd |+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 创建OpenStack客户端环境脚本：12345678910111213141516171819# vi /root/admin-openrcexport OS_PROJECT_DOMAIN_NAME=Defaultexport OS_USER_DOMAIN_NAME=Defaultexport OS_PROJECT_NAME=adminexport OS_USERNAME=adminexport OS_PASSWORD=123456export OS_AUTH_URL=http://controller:5000/v3export OS_IDENTITY_API_VERSION=3export OS_IMAGE_API_VERSION=2# vi /root/demo-openrcexport OS_PROJECT_DOMAIN_NAME=Defaultexport OS_USER_DOMAIN_NAME=Defaultexport OS_PROJECT_NAME=demoexport OS_USERNAME=demoexport OS_PASSWORD=123456export OS_AUTH_URL=http://controller:5000/v3export OS_IDENTITY_API_VERSION=3export OS_IMAGE_API_VERSION=2 使用脚本验证：1234567891011$ . admin-openrc$ openstack token issue+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| Field | Value |+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| expires | 2018-09-12T09:55:59+0000 || id | gAAAAABbmNSfM00gw3qvJi-U8ytTcBxfuVhgNkETRa-gh3PqLp6Md9cW_5FfbkUL1nyQGW4Bg_XvvdIhSBv7fXRnbfyqGxTxOUloe7BmnWgM9LqLn8Fm2FLQp8qcuFamyW-9_FZA5SPqxbYS1Ozk6fO7TRDWAIWdzy5i0-qqB4Ypt6vQOyW-pqk || project_id | 4a5e42dd8cbf410f85a5f145039d69a6 || user_id | 2ffffa1e6cbe4d239bdacc9760a54dd5 |+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+]]></content>
      <categories>
        <category>Openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Openstack Queens 环境搭建（二）环境相关服务]]></title>
    <url>%2F2019%2F03%2F19%2FOpenstackQueens2%2F</url>
    <content type="text"><![CDATA[Controller节点：安装NTP服务1234567891011121314# yum install chrony# vi /etc/chrony.confserver 0.centos.pool.ntp.org iburstserver 1.centos.pool.ntp.org iburstserver 2.centos.pool.ntp.org iburstserver 3.centos.pool.ntp.org iburst...allow 192.100.10.0/24...# systemctl enable chronyd.service 开机启用NTP# systemctl start chronyd.service 开启NTP服务 验证NTP服务： 1234567# chronyc sources 210 Number of sources = 2 MS Name/IP address Stratum Poll Reach LastRx Last sample =============================================================================== ^- 192.0.2.11 2 7 12 137 -2814us[-3000us] +/- 43ms ^* 192.0.2.12 2 6 177 46 +17us[ -23us] +/- 68ms 安装Openstack相关库1234# yum install centos-release-openstack-queens 安装Openstack库# yum upgrade 更新包# yum install python-openstackclient 安装Openstack客户端# yum install openstack-selinux 安装openstack-selinux用来管理Openstack服务的安全策略 关闭防火墙12# systemctl stop firewalld 关闭防火墙服务# systemctl disable firewalld 永久防火墙开机自启动 关闭SELINUX服务123# setenforce 0 关闭selinux服务# vi /etc/selinux/config 永久关闭selinux服务 SELINUX=disabled 安装数据库服务12345678910111213141516# yum install mariadb mariadb-server python2-PyMySQL# vi /etc/my.cnf.d/openstack.cnf[mysqld]bind-address = 192.100.10.160default-storage-engine = innodbinnodb_file_per_table = onmax_connections = 4096collation-server = utf8_general_cicharacter-set-server = utf8# systemctl enable mariadb.service 开机启用Mysql服务# systemctl start mariadb.service 开启Mysql服务# mysql_secure_installation 设置Mysql密码-&gt;123456 安装消息队列1234567# yum install rabbitmq-server# systemctl enable rabbitmq-server.service# systemctl start rabbitmq-server.service# rabbitmqctl add_user openstack 123456# rabbitmqctl set_permissions openstack ".*" ".*" ".*" 安装Memcached缓存1234567# yum install memcached python-memcached# vi /etc/sysconfig/memcachedOPTIONS="-l 127.0.0.1,::1,controller"# systemctl enable memcached.service# systemctl start memcached.service 安装Etcd1234567891011121314151617# yum install etcd# vi /etc/etcd/etcd.conf#[Member]ETCD_DATA_DIR="/var/lib/etcd/default.etcd"ETCD_LISTEN_PEER_URLS="http://192.100.10.160:2380"ETCD_LISTEN_CLIENT_URLS="http://192.100.10.160:2379"ETCD_NAME="controller"#[Clustering]ETCD_INITIAL_ADVERTISE_PEER_URLS="http://192.100.10.160:2380"ETCD_ADVERTISE_CLIENT_URLS="http://192.100.10.160:2379"ETCD_INITIAL_CLUSTER="controller=http://192.100.10.160:2380"ETCD_INITIAL_CLUSTER_TOKEN="etcd-cluster-01"ETCD_INITIAL_CLUSTER_STATE="new"# systemctl enable etcd# systemctl start etcd Compute节点：安装NTP服务1234567891011# yum install chrony# vi /etc/chrony.confserver controller iburst...allow 192.100.10.0/24...# systemctl enable chronyd.service 开机启用NTP# systemctl start chronyd.service 开启NTP服务 安装Openstack相关库1234# yum install centos-release-openstack-queens 安装Openstack库# yum upgrade 更新包# yum install python-openstackclient 安装Openstack客户端# yum install openstack-selinux 安装openstack-selinux用来管理Openstack服务的安全策略 关闭防火墙12# systemctl stop firewalld 关闭防火墙服务# systemctl disable firewalld 永久防火墙开机自启动 关闭SELINUX服务123# setenforce 0 关闭selinux服务# vi /etc/selinux/config 永久关闭selinux服务 SELINUX=disabled]]></content>
      <categories>
        <category>Openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Openstack Queens 环境搭建（一）环境准备]]></title>
    <url>%2F2019%2F03%2F19%2FOpenstackQueens1%2F</url>
    <content type="text"><![CDATA[环境准备：基于CentOS Linux release 7.6.1810 (Core) 控制节点（Controller）：eth0：192.100.10.160/24eth1：10.0.0.11/24eth2：预留 计算节点（Compute):eth0：192.100.10.161/24eth1：10.0.0.12/24eth2：预留 网卡0接口为管理网络 -&gt; 交换机 + 路由器网卡1接口为Overlay网络 -&gt; 目前直连 / 交换机连接网卡2接口为外部网络 -&gt; 路由器 -（可以先使用eth1作为外部网络下载Openstack安装所需资源，后修改） 通用密码： 123456 Controller节点：配置网卡信息： 12345# vi /etc/sysconfig/network-scripts/ifcfg-eth0BOOTPROTO=staticIPADDR=192.100.10.160NETMASK=255.255.255.0GATEWAY=192.100.10.1 1234# vi /etc/sysconfig/network-scripts/ifcfg-eth1BOOTPROTO=staticIPADDR=10.0.0.11NETMASK=255.255.255.0 配置主机信息： 12345# vi /etc/hosts# controller192.100.10.160 controller# compute192.100.10.161 compute 配置主机名：控制节点的主机名为controller，设置如下： 1~# hostnamectl set-hostname controller 对主机名进行验证： 1~# hostname 看到输出为controller即可 配置DNS： 12# vi /etc/resolv.confnameserver 114.114.114.114 Compute节点：配置管理网络： 12345# vi /etc/sysconfig/network-scripts/ifcfg-eth0BOOTPROTO=staticIPADDR=192.100.10.161NETMASK=255.255.255.0GATEWAY=192.100.10.1 1234# vi /etc/sysconfig/network-scripts/ifcfg-eth1BOOTPROTO=staticIPADDR=10.0.0.21NETMASK=255.255.255.0 配置主机信息： 12345# vi /etc/hosts# controller192.100.10.160 controller# compute192.100.10.161 compute 配置主机名：计算节点的主机名为compute，设置如下： 1~# hostnamectl set-hostname compute 对主机名进行验证： 1~# hostname 看到输出为compute即可 配置DNS： 12# vi /etc/resolv.confnameserver 114.114.114.114]]></content>
      <categories>
        <category>Openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[KDPA RestAPI]]></title>
    <url>%2F2019%2F03%2F10%2FKDPA%20RestAPI%2F</url>
    <content type="text"><![CDATA[KDPA RestAPI定义及说明 1 主机实例 1-1 创建主机实例 1-2 删除主机实例 1-3 配置主机实例 1-4 启动主机实例 1-5 关闭主机实例 1-6 挂起主机实例 1-7 恢复主机实例 1-8 获取主机实例基本信息 1-9 主机实例控制台 1-10 重命名主机实例 1-11 创建浮动IP 1-12 删除浮动IP 1-13 获取浮动IP信息 1-14 批量关闭实例组件 1-15 获取所有组件的状态 2 网线 2-1 创建网线 2-2 删除网线 3 通用 3-1 清除当前用户的实验室环境 3-2 设置实训平台系统配置 3-3 获取系统网卡信息及预留网段信息 3-4 用户实验室环境未保存退出 3-5 获取系统资源 3-6 获取系统资源使用率 3-7 按日期获取系统资源使用率 4 系统 4-1 创建镜像 4-2 删除镜像 5 纵向 5-1 创建纵向 5-2 删除纵向 6 串口线 6-1 创建串口线连接 6-2 删除串口线连接 7 UKEY 7-1 创建UKEY 7-2 删除UKEY 7-3 创建UKEY与纵向实例的连接 7-4 删除UKEY与纵向实例的连接 8 隔离 8-1 创建隔离 8-2 删除隔离 8-3 启动隔离 8-4 关闭隔离 8-5 挂起隔离 8-6 恢复隔离 8-7 隔离控制台 8-8 隔离创建浮动IP 8-9 隔离删除浮动IP 8-10 创建隔离镜像 8-11 删除隔离镜像 6-2 删除串口线连接 9 虚拟交换机 9-1 创建Untag虚拟交换机 9-2 删除Untag虚拟交换机 9-3 创建虚拟交换机 9-4 删除虚拟交换机 9-5 启动虚拟交换机 9-6 关闭虚拟交换机 9-7 设置虚拟交换机端口 9-8 获取被占用vlan 10 虚拟路由器 10-1 创建虚拟路由器 10-2 删除虚拟路由器 10-3 查看虚拟路由器配置 10-4 虚拟路由器上传镜像 10-5 虚拟路由器删除镜像 Notice: 1.以下所有API的方法都为POST 2.传参及返回值都为json格式，通用返回值格式为: {“code”: 状态码, “data”: 数据 }。 状态码为 0 代表操作成功，其他代表操作失败 3.api地址中，controller为计算节点的IP地址（已配置在主机配置文件中。8000为系统默认提供服务的端口号。 4.*参数为必填参数，其余为非必填，非必填参数系统传参默认值。 限制: 1.所有组件: 所有组件在关机状态下不能连接网线，不能删除网线。 实验室环境在未点击保存时会被清理，如有需要，手动点击保存按钮。 2.主机: 处于有网线连接或者关机状态下的主机不能修改配置。 处于挂起状态下的主机只能执行恢复操作，不能执行其他操作。 3.纵向: UKEY与纵向连接后，不能直接删除纵向，必须先拔出UKEY。 纵向与纵向之间通过网卡1连接，处理业务，如果纵向与纵向之间通过其他网卡连接，不予处理。 4.串口线: 串口线目前仅支持主机、隔离。 5.虚拟路由器: 虚拟路由器定义的配置在初始化后不能修改。 虚拟路由器与主机通过网线连接两端的网段必须相同。 6.虚拟交换机: 虚拟交换机与虚拟交换机不能通过网线连接。 虚拟交换机VLAN接口只能连接虚拟组件，虚实接口只能连接实体组件。 不同虚拟交换机中的VLAN ID不能重复。 在接口有连接的情况下，不能修改虚拟交换机端口的类型（VLAN接口/虚实接口）。 7.其他问题: 虚拟路由器与虚拟交换机网线连接后，目前虚拟路由器重启DHCP获取不到IP，导致虚拟路由器不可用。 虚拟路由器与主机组件之间有其他组件的情况下，需要手动为主机配置远端静态路由。 1主机实例1-1创建主机实例Request Method: POST API: 123456789101112- Params: - **uuid**(str.)*: 主机UUID，唯一标识，必填，长度1~63 - **name**(str.)*: 主机名称，必填，长度1~63 - **imageName**(str.)*: 镜像名称，必填，长度1~63 - **userId**(int.)*: 用户ID，必填 - template(int.): 模板类型，非必填， - 1代表 1 vcpu, 1G ram, 10G disk - 2代表 2 vcpu, 2G ram, 20G disk### 1-2删除主机实例#### Request- Method: **POST**- API: ```http://controller:8000/api/instance/delete Params: uuid(str.)*: 主机UUID，唯一标识，必填，长度1~63 1-3配置主机实例Request Method: POST API: 1234567891011- Params: - **uuid**(str.)*: 主机UUID，唯一标识，必填，长度1~63 - **ipAddr**(str.)*: IPv4地址，必填，例如:192.168.1.100 - netmask(str.): 掩码地址，非必填，默认值为”255.255.255.0” - gateway(str.): 网关地址，非必填 - number(int.): 网卡编号，非必填，默认值为1，表示主机目前都为1块网卡### 1-4启动主机实例#### Request- Method: **POST**- API: ```http://controller:8000/api/instance/start Params: uuid(str.)*: 主机UUID，唯一标识，必填，长度1~63 1-5关闭主机实例Request Method: POST API: 1234567- Params: - **uuid**(str.)*: 主机UUID，唯一标识，必填，长度1~63### 1-6挂起主机实例#### Request- Method: **POST**- API: ```http://controller:8000/api/instance/suspend Params: uuid(str.)*: 主机UUID，唯一标识，必填，长度1~63 1-7恢复主机实例Request Method: POST API: 1234567- Params: - **uuid**(str.)*: 主机UUID，唯一标识，必填，长度1~63### 1-8获取主机实例基本信息#### Request- Method: **POST**- API: ```http://controller:8000/api/instance/show Params: uuid(str.)*: 主机UUID，唯一标识，必填，长度1~63 Response Body123456789101112131415&#123; "code": 0, "data": &#123; "name": "HOST_1", "state": "Up", "interface": [&#123; "macAddr": "fa:16:3e:62:7b:cb", // MAC地址 "ipAddr": "192.168.1.5", // IP地址 "number": 0, // 网卡编号 "netmask": "255.255.255.0", // 掩码地址 "cidr": "192.168.1.0/24", // 网段地址 "gateway": "192.168.1.1" // 网关地址 &#125;] &#125;&#125; 1-9主机实例控制台Request Method: POST API: 12345- Params: - **uuid**(str.)*: 主机UUID，唯一标识，必填，长度1~63#### Response- Body { “code”: 0, “data”: { “console”: { “url”: “http://controller:6080/vnc_auto.html?token=aca31aec-fd05-46e4-9618-0e409c1e8b1e&quot;, “type”: “novnc” } }} 12345### 1-10重命名主机实例#### Request- Method: **POST**- API: ```http://controller:8000/api/instance/rename Params: uuid(str.)*: 主机UUID，唯一标识，必填，长度1~63 currentName(str.)*: 修改后主机名称，必填，长度1~63 1-11创建浮动IPRequest Method: POST API: 1234567- Params: - **uuid**(str.)*: 主机UUID，唯一标识，必填，长度1~63 ### 1-12删除主机浮动IP#### Request- Method: **POST**- API: ```http://controller:8000/api/instance/deleteFIP Params: uuid(str.)*: 主机UUID，唯一标识，必填，长度1~63 1-13获取浮动IP信息Request Method: POST API: 12345- Params: - **uuid**(str.)*: 主机UUID，唯一标识，必填，长度1~63#### Response- Body { “code”: 0, “data”: { “ftpHost”: “192.100.10.146”, “ftpPath”: ftp://192.100.10.146/ “username”: “ftpuser”, “passwd”: “ftpuser123”, “windowsPath”: “c:\ftpuser\“, “linuxPath”: “/home/ftpuser/“, }} 12345### 1-14批量关闭实例组件#### Request- Method: **POST**- API: ```http://controller:8000/api/instance/batchStop Params: userId(int.)*: 用户ID，必填 1-15获取所有组件的状态Request Method: POST API: 12345- Params: - **userId**(int.)*: 用户ID，必填#### Response- Body { “code”: 0, “data”: { “lineList”: [], “instanceList”: [{ “state”: “Up”, “uuid”: “n-djsgs10124o”, “ukeyid”: “n-fds52326574vf” }] }} 12345678state: 包括 ”UP”: 开机，”Down”：关机，“Suspend”：挂起。## 2网线### 2-1创建网线#### Request- Method: **POST**- API: ```http://controller:8000/api/netline/create Params: uuid(str.)*: 源组件UUID，唯一标识，必填，长度1~63 dstUuid(str.)*: 网线对端组件UUID，必填，长度1~63 netlineUuid(int.)*: 网线UUID，必填，网线的唯一标识 userId(int.)*: 用户ID，必填 number(int.): 网卡编号，非必填，默认值为1，表示主机的第1块网卡 dstNumber(int.): 网线对端网设备卡编号，非必填，默认值为1 vlan(int.): 连接网线时所占用的vlan标签，非必填，默认值为0 0: 默认值，表示当前连接的网线为常规网线，即虚拟组件与虚拟组件连接 14094: 当vlan为14094之前的正整数时，表示此网线为虚实连线，vlan标签表示外部实体设备实际的vlan标签，此标签每个实体设备间不能相同。 2-2删除网线Request Method: POST API: 12345678910- Params: - **uuid**(str.)*: 网线UUID，唯一标识，必填，长度1~63 - **userId**(int.)*: 用户ID，必填## 3通用### 3-1清除当前用户的实验室环境#### Request- Method: **POST**- API: ```http://controller:8000/api/env/clear Params: userId(int.)*: 用户ID，必填 3-2设置实训平台系统配置Request Method: POST API: 1234567- Params: - **maxVmNumber**(str.)*: 用户最大创建虚拟机数量，默认值为10### 3-3获取系统网卡信息及预留网段信息#### Request- Method: **POST**- API: ```http://controller:8000/api/system/info Params: 无 Response Body12345678910111213141516171819202122232425262728293031323334353637383940414243444546&#123; "code": 0, "data": &#123; "networkParameters": [&#123; "nodeType": "控制节点", "nodeName": "controller", "interfaceInfo": [&#123; "ethName": "enp2s0", "ipAddr": "192.100.10.58" &#125;, &#123; "ethName": "enp3s0", "ipAddr": "10.0.0.11" &#125;] &#125;,&#123; "nodeType": "计算节点", "nodeName": "compute1", "interfaceInfo": [&#123; "ethName": "enp0s31f6", "ipAddr": "192.100.10.160" &#125;, &#123; "ethName": "enp0s20f0u8", "ipAddr": "10.0.0.31" &#125;] &#125;] , "reserveCidr": [ &#123; "name": "浮动IP网段", "cidr": [&#123; "start": "192.100.10.140", "end": "192.100.10.141" &#125;, &#123; "start": "192.100.10.161", "end": "192.100.10.169" &#125;, &#123; "start": "192.100.10.144", "end": "192.100.10.149" &#125;] &#125;,&#123; "name": "Overlay网段", "cidr": [&#123; "start": "10.0.0.11", "end": "10.0.0.30" &#125; ] &#125;,&#123; "name": "内部网段", "cidr": [&#123; "start": "20.0.0.2", "end": "20.0.0.254" &#125; ] &#125; ] &#125;&#125; 3-4用户实验室环境未保存退出Request Method: POST API: 12345678910- Params: - **instanceList**(list.)*: 实例组件uuid列表，必填 - **netlineList**(list.)*: 网线组件uuid列表，必填 - **userId**(int.)*: 用户ID，必填 - **clickF5**(str)*: 是否点击F5进行刷新，默认为&quot;False&quot;,非必填 ### 3-5获取系统资源#### Request- Method: **POST**- API: ```http://controller:8000/api/system/resource Params: 无 Response Body1234567891011121314151617&#123; "code": 0, "data": &#123; "nodeNumber": 2, # 节点数量 "runningNodeNumber": 2, # 正在运行的节点数量 "instanceNumber": 2, # 实例数量 "vcpuUsed": 3, # VCPU使用量 个数 "vcpuTotal": 24, # VCPU总量 个数 "vcpu": "3/24", # VCPU使用情况 个数 "memoryUsed": 4.0, # 内存使用量 GB "memoryTotal": 23.8, # 内存总量 GB "memory": "4.0/23.8", # 内存使用情况 GB "diskUsed": 30, # 磁盘使用量 GB "diskTotal": 2198, # 磁盘总量 GB "disk": "30/2198" # 磁盘使用情况 GB &#125;&#125; 3-6获取系统资源使用率Request Method: POST API: 12345- Params: - 无 #### Response- Body { “code”: 0, “data”: { “cpu”: [“4.1”, “4.1”, “3.9”, “4.6”], “memory”: [“67.6”, “67.8”, “67.8”, “67.9”], “disk”: [“5.7”, “5.7”, “5.7”, “5.7”], “net_out”: [“0”, “653”, “17702”, “0”], “net_in”: [“0”, “2203”, “18517”, “0”], “time”: [ “2019-06-14 07:38:01”, “2019-06-14 07:38:10”, “2019-06-14 07:38:20”, “2019-06-14 07:38:30”] }} 12345### 3-7按日期获取系统资源使用率#### Request- Method: **POST**- API: ```http://controller:8000/api/system/dateUsage Params: date(str.)*: 日期，例：”2019-06-17” Response Body1234567891011121314151617&#123; "code": 0, "data": &#123; "memory": ["71.8", "74.5", "74.5", "74.5", "74.1"], "net_out": ["0", "772940", "130350", "167966", "172898"], "net_in": ["0", "14704", "3530", "4194", "4442"], "time": [ "2019-06-17 02:00:02", "2019-06-17 03:00:02", "2019-06-17 04:00:02", "2019-06-17 05:00:02", "2019-06-17 06:00:02" ], "disk": ["5.7", "5.7", "5.7", "5.7", "5.7"], "cpu": ["4.6", "13.2", "13.8", "13.6", "13.5"] &#125;&#125; 4系统4-1创建镜像Request Method: POST API: 1234567891011121314- Params: - **name**(str.)*: 镜像名称，必填 - **url**(str.)*: 镜像路径，必填 - defaultVCPU(int.): 默认虚拟CPU个数，非必填，默认值1 - defaultRAM(int.): 默认内存大小，非必填，单位MB，默认值1024 - defaultDISK (int.): 默认磁盘大小，非必填，单位GB，默认值10 - advancedVCPU(int.): 高级虚拟CPU个数，非必填，默认值2 - advancedRAM (int.): 高级内存大小，非必填，默认值2048 - advancedDISK (int.): 高级磁盘大小，非必填，单位GB，默认值20 ### 4-2删除镜像#### Request- Method: **POST**- API: ```http://controller:8000/api/image/delete Params: name(str.)*: 镜像名称，必填 5纵向5-1创建纵向Request Method: POST API: 123456789101112- Params: - **uuid**(str.)*: 纵向UUID，唯一标识，必填，长度1~63 - **name**(str.)*: 纵向名称，必填，长度1~63 - **userId**(int.)*: 用户ID，必填 - template(int.): 模板类型，非必填， - 1代表 1 vcpu, 1G ram, 10G disk - 2代表 2 vcpu, 2G ram, 20G disk### 5-2删除纵向#### Request- Method: **POST**- API: ```http://controller:8000/api/pstunnel/delete Params: uuid(str.)*: 纵向UUID，唯一标识，必填，长度1~63 6串口线6-1创建串口线连接Request Method: POST API: 123456789101112- Params: - **uuid**(str.)*: 实例组件UUID，唯一标识，必填，长度1~63 - **dstUuid**(str.)*: 目的实例组件UUID，唯一标识，必填，长度1~63 - **seriallineUuid**(str.)*: 串口线UUID，唯一标识，必填，长度1~63 - **userId**(int.)*: 用户ID，必填 - number(int.): 默认值为0。对于主机，数值无意义。对于隔离，0==内隔离串口，1==外隔离串口 - dstNumber(int.): 默认值为0。对于主机，数值无意义。对于隔离，0==内隔离串口，1==外隔离串口### 6-2删除串口线连接#### Request- Method: **POST**- API: ```http://controller:8000/api/serline/delete Params: uuid(str.)*: 串口线UUID，唯一标识，必填，长度1~63 userId(int.)*: 用户ID，必填 7UKEY7-1创建UKEYRequest Method: POST API: 123456789- Params: - **uuid**(str.)*: UKEY UUID，唯一标识，必填，长度1~63 - **name**(str.)*: UKEY 名称，必填，长度1~63 - **userId**(int.)*: 用户ID，必填### 7-2删除UKEY#### Request- Method: **POST**- API: ```http://controller:8000/api/ukey/delete Params: uuid(str.)*: UKEY UUID，唯一标识，必填，长度1~63 userId(int.)*: 用户ID，必填 7-3创建UKEY与纵向实例的连接Request Method: POST API: 123456789- Params: - **uuid**(str.)*: UKEY UUID，唯一标识，必填，长度1~63 - **psUuid**(str.)*: 纵向UUID，唯一标识，必填，长度1~63 - **userId**(int.)*: 用户ID，必填### 7-4删除UKEY与纵向实例的连接#### Request- Method: **POST**- API: ```http://controller:8000/api/ukey/disconnect Params: uuid(str.)*: UKEY UUID，唯一标识，必填，长度1~63 psUuid(str.)*: 纵向UUID，唯一标识，必填，长度1~63 userId(int.)*: 用户ID，必填 8隔离8-1创建隔离Request Method: POST API: 12345678910111213- Params: - **uuid**(str.)*: 隔离UUID，唯一标识，必填，长度1~63 - **name**(str.)*: 隔离名称，必填，长度1~63 - **imageName**(str.)*: 隔离镜像名称，必填，长度1~63 - **userId**(int.)*: 用户ID，必填 - template(int.): 模板类型，非必填， - 1代表 1 vcpu, 1G ram, 10G disk - 2代表 2 vcpu, 2G ram, 20G disk### 8-2删除隔离#### Request- Method: **POST**- API: ```http://controller:8000/api/stonewall/delete Params: uuid(str.)*: 隔离UUID，唯一标识，必填，长度1~63 userId(int.)*: 用户ID，必填 8-3启动隔离Request Method: POST API: 1234567- Params: - **uuid**(str.)*: 隔离UUID，唯一标识，必填，长度1~63### 8-4关闭隔离#### Request- Method: **POST**- API: ```http://controller:8000/api/stonewall/stop Params: uuid(str.)*: 隔离UUID，唯一标识，必填，长度1~63 8-5挂起隔离Request Method: POST API: 1234567- Params: - **uuid**(str.)*: 隔离UUID，唯一标识，必填，长度1~63### 8-6恢复隔离#### Request- Method: **POST**- API: ```http://controller:8000/api/stonewall/resume Params: uuid(str.)*: 隔离UUID，唯一标识，必填，长度1~63 8-7隔离控制台Request Method: POST API: 123456- Params: - **uuid**(str.)*: 隔离UUID，唯一标识，必填，长度1~63 - number(int.): 标识内网/外网隔离，值范围：0/1，0代表内，1代表外，默认值为0#### Response- Body { “code”: 0, “data”: { “console”: { “url”: “http://controller:6080/vnc_auto.html?token=aca31aec-fd05-46e4-9618-0e409c1e8b1e&quot;, “type”: “novnc” } }} 12345### 8-8隔离创建浮动IP#### Request- Method: **POST**- API: ```http://controller:8000/api/stonewall/createFIP Params: uuid(str.)*: 隔离UUID，唯一标识，必填，长度1~63 number(int.): 标识内网/外网隔离，值范围：0/1，0代表内，1代表外，默认值为0 8-9隔离删除浮动IPRequest Method: POST API: 12345678- Params: - **uuid**(str.)*: 隔离UUID，唯一标识，必填，长度1~63 - number(int.): 标识内网/外网隔离，值范围：0/1，0代表内，1代表外，默认值为0### 8-10创建隔离镜像#### Request- Method: **POST**- API: ```http://controller:8000/api/stonewall/createImg Params: name(str.)*: 镜像名称，必填 urlInt(str.)*: 内镜像路径，必填 urlExt(str.)*: 外镜像路径，必填 defaultVCPU(int.): 默认虚拟CPU个数，非必填，默认值1 defaultRAM(int.): 默认内存大小，非必填，单位MB，默认值1024 defaultDISK (int.): 默认磁盘大小，非必填，单位GB，默认值10 advancedVCPU(int.): 高级虚拟CPU个数，非必填，默认值2 advancedRAM (int.): 高级内存大小，非必填，默认值2048 advancedDISK (int.): 高级磁盘大小，非必填，单位GB，默认值20 8-11删除隔离镜像Request Method: POST API: 123456789101112131415- Params: - **name**(str.)*: 镜像名称，必填## 9虚拟交换机### 9-1创建Untag虚拟交换机#### Request- Method: **POST**- API: `http://controller:8000/api/switch/createUntagSwitch`- Params: - **uuid&lt;str, 必填&gt;**: 虚拟交换机UUID，唯一标识吗 - **name&lt;str, 必填&gt;**: 虚拟交换机名称 - **userId&lt;str, 必填&gt;**: 用户ID - *number&lt;str, 非必填&gt;*: 虚拟交换机网口数量，默认值8#### Response { “code”: API执行结果码，0-执行成功，其他正整数-执行失败的错误信息编码;} 1234567### 9-2删除Untag虚拟交换机#### Request- Method: **POST**- API: `http://controller:8000/api/switch/deleteUntagSwitch`- Params: - **uuid&lt;str, 必填&gt;**: 虚拟交换机UUID，唯一标识吗#### Response { “code”: API执行结果码，0-执行成功，其他正整数-执行失败的错误信息编码;} 12345678910### 9-3创建虚拟交换机#### Request- Method: **POST**- API: `http://controller:8000/api/switch/create`- Params: - **uuid&lt;str, 必填&gt;**: 虚拟交换机UUID，唯一标识吗 - **name&lt;str, 必填&gt;**: 虚拟交换机名称 - **userId&lt;str, 必填&gt;**: 用户ID - *number&lt;str, 非必填&gt;*: 虚拟交换机网口数量，默认值8#### Response { “code”: API执行结果码，0-执行成功，其他正整数-执行失败的错误信息编码;} 1234567### 9-4删除虚拟交换机#### Request- Method: **POST**- API: `http://controller:8000/api/switch/delete`- Params: - **uuid&lt;str, 必填&gt;**: 虚拟交换机UUID，唯一标识吗#### Response { “code”: API执行结果码，0-执行成功，其他正整数-执行失败的错误信息编码;} 1234567### 9-5启动虚拟交换机#### Request- Method: **POST**- API: `http://controller:8000/api/switch/start`- Params: - **uuid&lt;str, 必填&gt;**: 虚拟交换机UUID，唯一标识吗#### Response { “code”: API执行结果码，0-执行成功，其他正整数-执行失败的错误信息编码;} 1234567### 9-6关闭虚拟交换机#### Request- Method: **POST**- API: `http://controller:8000/api/switch/stop`- Params: - **uuid&lt;str, 必填&gt;**: 虚拟交换机UUID，唯一标识吗#### Response { “code”: API执行结果码，0-执行成功，其他正整数-执行失败的错误信息编码;} 123456789101112### 9-7设置虚拟交换机端口#### Request- Method: **POST**- API: `http://controller:8000/api/switch/configSwitchPort`- Params: - **uuid&lt;str, 必填&gt;**: 虚拟交换机UUID，唯一标识吗 - **number&lt;str, 必填&gt;**: 虚拟交换机端口序号，从0开始，最大值由交换机端口数量决定，必填 - **vlan&lt;str, 必填&gt;**: 端口将要设置的具体vlan标签 - *-1*：表示端口要设置成为【虚实口】 - *0*： 表示端口默认状态，此状态下端口不可用，即不能连接网线 - *1~4094*：表示端口设置为【vlan口】，vlan标签为1至4094之间的任意正整数#### Response { “code”: API执行结果码，0-执行成功，其他正整数-执行失败的错误信息编码;} 1234567### 9-8获取被占用vlan#### Request- Method: **POST**- API: `http://controller:8000/api/switch/getUsedVlanList`- Params: - **uuid&lt;str, 必填&gt;**: 虚拟交换机UUID，唯一标识吗#### Response { “code”: API执行结果码，0-执行成功，其他正整数-执行失败的错误信息编码; “data”: [1, 23, 129, …]} 1234567## 10虚拟路由器### 10-1创建虚拟路由器#### Request- Method: **POST**- API: ```http://controller:8000/api/router/create Params: uuid(str.)*: 虚拟路由器UUID，唯一标识，必填，长度1~63 name(str.)*: 虚拟路由器名称，必填，长度1~63 number(int.)*: 虚拟路由器接口数量，默认值为2，必填 cidrList(list.)*: 虚拟路由器网段列表，必填 例如：[“192.168.1.0/24”, “192.168.2.0/24”] 网段的格式：网段地址/掩码位数， 网段不能重复。 imageName(str.)*: 镜像名称，必填，长度1~63 userId(int.)*: 用户ID，必填 10-2删除虚拟路由器Request Method: POST API: 1234567- Params: - **uuid**(str.)*: 虚拟路由器UUID，唯一标识，必填，长度1~63### 10-3查看虚拟路由器配置 #### Request- Method: **POST**- API: ```http://controller:8000/api/router/show Params: uuid(str.)*: 虚拟路由器UUID，唯一标识，必填，长度1~63 Response Body123456789101112131415&#123; "code": 0, "data": [ &#123; "number": 0, "cidr": "192.168.1.0/24", "gateway": "192.168.1.1" &#125;, &#123; "number": 1, "cidr": "192.168.2.0/24", "gateway": "192.168.2.1" &#125; ]&#125; 10-4虚拟路由器上传镜像Request Method: POST API: 12345678910- Params: - **name**(str.)*: 镜像名称，必填 - **url**(str.)*: 镜像路径，必填 虚拟路由器镜像默认1VCPU，1G内存，10G磁盘### 10-5虚拟路由器删除镜像 #### Request- Method: **POST**- API: ```http://controller:8000/api/router/deleteImg Params: name(str.)*: 镜像名称，必填]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
